import {
  $toggleLink,
  LinkNode,
  TOGGLE_LINK_COMMAND
} from "./chunk-EHURSJKZ.js";
import {
  mergeRegister,
  objectKlassEquals
} from "./chunk-GIYIIVPD.js";
import "./chunk-NKQE2W3A.js";
import {
  useLexicalComposerContext
} from "./chunk-BOFAG2GE.js";
import {
  require_react
} from "./chunk-NWEMTEYF.js";
import {
  $getSelection,
  $isElementNode,
  $isRangeSelection,
  COMMAND_PRIORITY_LOW,
  PASTE_COMMAND
} from "./chunk-BMIPEBXK.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/.pnpm/@lexical+react@0.32.1_react_442fd0794fb432321ddc5485b4f46deb/node_modules/@lexical/react/LexicalLinkPlugin.dev.mjs
var import_react = __toESM(require_react(), 1);
function LinkPlugin({
  validateUrl,
  attributes
}) {
  const [editor] = useLexicalComposerContext();
  (0, import_react.useEffect)(() => {
    if (!editor.hasNodes([LinkNode])) {
      throw new Error("LinkPlugin: LinkNode not registered on editor");
    }
    return mergeRegister(editor.registerCommand(TOGGLE_LINK_COMMAND, (payload) => {
      if (payload === null) {
        $toggleLink(payload);
        return true;
      } else if (typeof payload === "string") {
        if (validateUrl === void 0 || validateUrl(payload)) {
          $toggleLink(payload, attributes);
          return true;
        }
        return false;
      } else {
        const {
          url,
          target,
          rel,
          title
        } = payload;
        $toggleLink(url, {
          ...attributes,
          rel,
          target,
          title
        });
        return true;
      }
    }, COMMAND_PRIORITY_LOW), validateUrl !== void 0 ? editor.registerCommand(PASTE_COMMAND, (event) => {
      const selection = $getSelection();
      if (!$isRangeSelection(selection) || selection.isCollapsed() || !objectKlassEquals(event, ClipboardEvent)) {
        return false;
      }
      if (event.clipboardData === null) {
        return false;
      }
      const clipboardText = event.clipboardData.getData("text");
      if (!validateUrl(clipboardText)) {
        return false;
      }
      if (!selection.getNodes().some((node) => $isElementNode(node))) {
        editor.dispatchCommand(TOGGLE_LINK_COMMAND, {
          ...attributes,
          url: clipboardText
        });
        event.preventDefault();
        return true;
      }
      return false;
    }, COMMAND_PRIORITY_LOW) : () => {
    });
  }, [editor, validateUrl, attributes]);
  return null;
}
export {
  LinkPlugin
};
//# sourceMappingURL=@lexical_react_LexicalLinkPlugin.js.map
