{
  "version": 3,
  "sources": ["../../.pnpm/@lexical+react@0.32.1_react_442fd0794fb432321ddc5485b4f46deb/node_modules/@lexical/react/LexicalLinkPlugin.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { LinkNode, TOGGLE_LINK_COMMAND, $toggleLink } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { mergeRegister, objectKlassEquals } from '@lexical/utils';\nimport { COMMAND_PRIORITY_LOW, PASTE_COMMAND, $getSelection, $isRangeSelection, $isElementNode } from 'lexical';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LinkPlugin({\n  validateUrl,\n  attributes\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n    return mergeRegister(editor.registerCommand(TOGGLE_LINK_COMMAND, payload => {\n      if (payload === null) {\n        $toggleLink(payload);\n        return true;\n      } else if (typeof payload === 'string') {\n        if (validateUrl === undefined || validateUrl(payload)) {\n          $toggleLink(payload, attributes);\n          return true;\n        }\n        return false;\n      } else {\n        const {\n          url,\n          target,\n          rel,\n          title\n        } = payload;\n        $toggleLink(url, {\n          ...attributes,\n          rel,\n          target,\n          title\n        });\n        return true;\n      }\n    }, COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(PASTE_COMMAND, event => {\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || selection.isCollapsed() || !objectKlassEquals(event, ClipboardEvent)) {\n        return false;\n      }\n      if (event.clipboardData === null) {\n        return false;\n      }\n      const clipboardText = event.clipboardData.getData('text');\n      if (!validateUrl(clipboardText)) {\n        return false;\n      }\n      // If we select nodes that are elements then avoid applying the link.\n      if (!selection.getNodes().some(node => $isElementNode(node))) {\n        editor.dispatchCommand(TOGGLE_LINK_COMMAND, {\n          ...attributes,\n          url: clipboardText\n        });\n        event.preventDefault();\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW) : () => {\n      // Don't paste arbitrary text as a link when there's no validate function\n    });\n  }, [editor, validateUrl, attributes]);\n  return null;\n}\n\nexport { LinkPlugin };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,mBAA0B;AAU1B,SAAS,WAAW;AAAA,EAClB;AAAA,EACA;AACF,GAAG;AACD,QAAM,CAAC,MAAM,IAAI,0BAA0B;AAC3C,8BAAU,MAAM;AACd,QAAI,CAAC,OAAO,SAAS,CAAC,QAAQ,CAAC,GAAG;AAChC,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AACA,WAAO,cAAc,OAAO,gBAAgB,qBAAqB,aAAW;AAC1E,UAAI,YAAY,MAAM;AACpB,oBAAY,OAAO;AACnB,eAAO;AAAA,MACT,WAAW,OAAO,YAAY,UAAU;AACtC,YAAI,gBAAgB,UAAa,YAAY,OAAO,GAAG;AACrD,sBAAY,SAAS,UAAU;AAC/B,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT,OAAO;AACL,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,IAAI;AACJ,oBAAY,KAAK;AAAA,UACf,GAAG;AAAA,UACH;AAAA,UACA;AAAA,UACA;AAAA,QACF,CAAC;AACD,eAAO;AAAA,MACT;AAAA,IACF,GAAG,oBAAoB,GAAG,gBAAgB,SAAY,OAAO,gBAAgB,eAAe,WAAS;AACnG,YAAM,YAAY,cAAc;AAChC,UAAI,CAAC,kBAAkB,SAAS,KAAK,UAAU,YAAY,KAAK,CAAC,kBAAkB,OAAO,cAAc,GAAG;AACzG,eAAO;AAAA,MACT;AACA,UAAI,MAAM,kBAAkB,MAAM;AAChC,eAAO;AAAA,MACT;AACA,YAAM,gBAAgB,MAAM,cAAc,QAAQ,MAAM;AACxD,UAAI,CAAC,YAAY,aAAa,GAAG;AAC/B,eAAO;AAAA,MACT;AAEA,UAAI,CAAC,UAAU,SAAS,EAAE,KAAK,UAAQ,eAAe,IAAI,CAAC,GAAG;AAC5D,eAAO,gBAAgB,qBAAqB;AAAA,UAC1C,GAAG;AAAA,UACH,KAAK;AAAA,QACP,CAAC;AACD,cAAM,eAAe;AACrB,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,GAAG,oBAAoB,IAAI,MAAM;AAAA,IAEjC,CAAC;AAAA,EACH,GAAG,CAAC,QAAQ,aAAa,UAAU,CAAC;AACpC,SAAO;AACT;",
  "names": []
}
