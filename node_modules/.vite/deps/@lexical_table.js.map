{
  "version": 3,
  "sources": ["../../.pnpm/@lexical+table@0.32.1/node_modules/@lexical/table/LexicalTable.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { addClassNamesToElement, $descendantsMatching, $findMatchingParent, removeClassNamesFromElement, objectKlassEquals, isHTMLElement as isHTMLElement$1, $insertFirst as $insertFirst$1, mergeRegister, $insertNodeToNearestRoot, $unwrapAndFilterDescendants } from '@lexical/utils';\nimport { ElementNode, isHTMLElement, $isInlineElementOrDecoratorNode, $isTextNode, $isLineBreakNode, $createParagraphNode, $applyNodeReplacement, createCommand, $createTextNode, $getSelection, $isRangeSelection, $isParagraphNode, $createPoint, $isElementNode, $normalizeSelection__EXPERIMENTAL, isCurrentlyReadOnlyMode, TEXT_TYPE_TO_FORMAT, $getNodeByKey, $getEditor, $setSelection, SELECTION_CHANGE_COMMAND, getDOMSelection, $createRangeSelection, $isRootNode, INSERT_PARAGRAPH_COMMAND, COMMAND_PRIORITY_HIGH, KEY_ESCAPE_COMMAND, COMMAND_PRIORITY_CRITICAL, CUT_COMMAND, FORMAT_TEXT_COMMAND, FORMAT_ELEMENT_COMMAND, CONTROLLED_TEXT_INSERTION_COMMAND, KEY_TAB_COMMAND, FOCUS_COMMAND, SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, $getPreviousSelection, $getNearestNodeFromDOMNode, $createRangeSelectionFromDom, $isRootOrShadowRoot, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_UP_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, DELETE_WORD_COMMAND, DELETE_LINE_COMMAND, DELETE_CHARACTER_COMMAND, KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND, isDOMNode, $caretFromPoint, $isExtendableTextPointCaret, $extendCaretToRange, $isSiblingCaret, $getSiblingCaret, $setPointFromCaret, $normalizeCaret, $getAdjacentChildCaret, $isChildCaret, $getChildCaret, setDOMUnmanaged, COMMAND_PRIORITY_EDITOR, CLICK_COMMAND } from 'lexical';\nimport { copyToClipboard, $getClipboardDataFromSelection } from '@lexical/clipboard';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PIXEL_VALUE_REG_EXP = /^(\\d+(?:\\.\\d+)?)px$/;\n\n// .PlaygroundEditorTheme__tableCell width value from\n// packages/lexical-playground/src/themes/PlaygroundEditorTheme.css\nconst COLUMN_WIDTH = 75;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst TableCellHeaderStates = {\n  BOTH: 3,\n  COLUMN: 2,\n  NO_STATUS: 0,\n  ROW: 1\n};\n/** @noInheritDoc */\nclass TableCellNode extends ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'tablecell';\n  }\n  static clone(node) {\n    return new TableCellNode(node.__headerState, node.__colSpan, node.__width, node.__key);\n  }\n  afterCloneFrom(node) {\n    super.afterCloneFrom(node);\n    this.__rowSpan = node.__rowSpan;\n    this.__backgroundColor = node.__backgroundColor;\n    this.__verticalAlign = node.__verticalAlign;\n  }\n  static importDOM() {\n    return {\n      td: node => ({\n        conversion: $convertTableCellNodeElement,\n        priority: 0\n      }),\n      th: node => ({\n        conversion: $convertTableCellNodeElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createTableCellNode().updateFromJSON(serializedNode);\n  }\n  updateFromJSON(serializedNode) {\n    return super.updateFromJSON(serializedNode).setHeaderStyles(serializedNode.headerState).setColSpan(serializedNode.colSpan || 1).setRowSpan(serializedNode.rowSpan || 1).setWidth(serializedNode.width || undefined).setBackgroundColor(serializedNode.backgroundColor || null).setVerticalAlign(serializedNode.verticalAlign || undefined);\n  }\n  constructor(headerState = TableCellHeaderStates.NO_STATUS, colSpan = 1, width, key) {\n    super(key);\n    this.__colSpan = colSpan;\n    this.__rowSpan = 1;\n    this.__headerState = headerState;\n    this.__width = width;\n    this.__backgroundColor = null;\n    this.__verticalAlign = undefined;\n  }\n  createDOM(config) {\n    const element = document.createElement(this.getTag());\n    if (this.__width) {\n      element.style.width = `${this.__width}px`;\n    }\n    if (this.__colSpan > 1) {\n      element.colSpan = this.__colSpan;\n    }\n    if (this.__rowSpan > 1) {\n      element.rowSpan = this.__rowSpan;\n    }\n    if (this.__backgroundColor !== null) {\n      element.style.backgroundColor = this.__backgroundColor;\n    }\n    if (isValidVerticalAlign(this.__verticalAlign)) {\n      element.style.verticalAlign = this.__verticalAlign;\n    }\n    addClassNamesToElement(element, config.theme.tableCell, this.hasHeader() && config.theme.tableCellHeader);\n    return element;\n  }\n  exportDOM(editor) {\n    const output = super.exportDOM(editor);\n    if (isHTMLElement(output.element)) {\n      const element = output.element;\n      element.setAttribute('data-temporary-table-cell-lexical-key', this.getKey());\n      element.style.border = '1px solid black';\n      if (this.__colSpan > 1) {\n        element.colSpan = this.__colSpan;\n      }\n      if (this.__rowSpan > 1) {\n        element.rowSpan = this.__rowSpan;\n      }\n      element.style.width = `${this.getWidth() || COLUMN_WIDTH}px`;\n      element.style.verticalAlign = this.getVerticalAlign() || 'top';\n      element.style.textAlign = 'start';\n      if (this.__backgroundColor === null && this.hasHeader()) {\n        element.style.backgroundColor = '#f2f3f5';\n      }\n    }\n    return output;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      ...(isValidVerticalAlign(this.__verticalAlign) && {\n        verticalAlign: this.__verticalAlign\n      }),\n      backgroundColor: this.getBackgroundColor(),\n      colSpan: this.__colSpan,\n      headerState: this.__headerState,\n      rowSpan: this.__rowSpan,\n      width: this.getWidth()\n    };\n  }\n  getColSpan() {\n    return this.getLatest().__colSpan;\n  }\n  setColSpan(colSpan) {\n    const self = this.getWritable();\n    self.__colSpan = colSpan;\n    return self;\n  }\n  getRowSpan() {\n    return this.getLatest().__rowSpan;\n  }\n  setRowSpan(rowSpan) {\n    const self = this.getWritable();\n    self.__rowSpan = rowSpan;\n    return self;\n  }\n  getTag() {\n    return this.hasHeader() ? 'th' : 'td';\n  }\n  setHeaderStyles(headerState, mask = TableCellHeaderStates.BOTH) {\n    const self = this.getWritable();\n    self.__headerState = headerState & mask | self.__headerState & ~mask;\n    return self;\n  }\n  getHeaderStyles() {\n    return this.getLatest().__headerState;\n  }\n  setWidth(width) {\n    const self = this.getWritable();\n    self.__width = width;\n    return self;\n  }\n  getWidth() {\n    return this.getLatest().__width;\n  }\n  getBackgroundColor() {\n    return this.getLatest().__backgroundColor;\n  }\n  setBackgroundColor(newBackgroundColor) {\n    const self = this.getWritable();\n    self.__backgroundColor = newBackgroundColor;\n    return self;\n  }\n  getVerticalAlign() {\n    return this.getLatest().__verticalAlign;\n  }\n  setVerticalAlign(newVerticalAlign) {\n    const self = this.getWritable();\n    self.__verticalAlign = newVerticalAlign || undefined;\n    return self;\n  }\n  toggleHeaderStyle(headerStateToToggle) {\n    const self = this.getWritable();\n    if ((self.__headerState & headerStateToToggle) === headerStateToToggle) {\n      self.__headerState -= headerStateToToggle;\n    } else {\n      self.__headerState += headerStateToToggle;\n    }\n    return self;\n  }\n  hasHeaderState(headerState) {\n    return (this.getHeaderStyles() & headerState) === headerState;\n  }\n  hasHeader() {\n    return this.getLatest().__headerState !== TableCellHeaderStates.NO_STATUS;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__headerState !== this.__headerState || prevNode.__width !== this.__width || prevNode.__colSpan !== this.__colSpan || prevNode.__rowSpan !== this.__rowSpan || prevNode.__backgroundColor !== this.__backgroundColor || prevNode.__verticalAlign !== this.__verticalAlign;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  collapseAtStart() {\n    return true;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction isValidVerticalAlign(verticalAlign) {\n  return verticalAlign === 'middle' || verticalAlign === 'bottom';\n}\nfunction $convertTableCellNodeElement(domNode) {\n  const domNode_ = domNode;\n  const nodeName = domNode.nodeName.toLowerCase();\n  let width = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.width)) {\n    width = parseFloat(domNode_.style.width);\n  }\n  const tableCellNode = $createTableCellNode(nodeName === 'th' ? TableCellHeaderStates.ROW : TableCellHeaderStates.NO_STATUS, domNode_.colSpan, width);\n  tableCellNode.__rowSpan = domNode_.rowSpan;\n  const backgroundColor = domNode_.style.backgroundColor;\n  if (backgroundColor !== '') {\n    tableCellNode.__backgroundColor = backgroundColor;\n  }\n  const verticalAlign = domNode_.style.verticalAlign;\n  if (isValidVerticalAlign(verticalAlign)) {\n    tableCellNode.__verticalAlign = verticalAlign;\n  }\n  const style = domNode_.style;\n  const textDecoration = (style && style.textDecoration || '').split(' ');\n  const hasBoldFontWeight = style.fontWeight === '700' || style.fontWeight === 'bold';\n  const hasLinethroughTextDecoration = textDecoration.includes('line-through');\n  const hasItalicFontStyle = style.fontStyle === 'italic';\n  const hasUnderlineTextDecoration = textDecoration.includes('underline');\n  return {\n    after: childLexicalNodes => {\n      const result = [];\n      let paragraphNode = null;\n      const removeSingleLineBreakNode = () => {\n        if (paragraphNode) {\n          const firstChild = paragraphNode.getFirstChild();\n          if ($isLineBreakNode(firstChild) && paragraphNode.getChildrenSize() === 1) {\n            firstChild.remove();\n          }\n        }\n      };\n      for (const child of childLexicalNodes) {\n        if ($isInlineElementOrDecoratorNode(child) || $isTextNode(child) || $isLineBreakNode(child)) {\n          if ($isTextNode(child)) {\n            if (hasBoldFontWeight) {\n              child.toggleFormat('bold');\n            }\n            if (hasLinethroughTextDecoration) {\n              child.toggleFormat('strikethrough');\n            }\n            if (hasItalicFontStyle) {\n              child.toggleFormat('italic');\n            }\n            if (hasUnderlineTextDecoration) {\n              child.toggleFormat('underline');\n            }\n          }\n          if (paragraphNode) {\n            paragraphNode.append(child);\n          } else {\n            paragraphNode = $createParagraphNode().append(child);\n            result.push(paragraphNode);\n          }\n        } else {\n          result.push(child);\n          removeSingleLineBreakNode();\n          paragraphNode = null;\n        }\n      }\n      removeSingleLineBreakNode();\n      if (result.length === 0) {\n        result.push($createParagraphNode());\n      }\n      return result;\n    },\n    node: tableCellNode\n  };\n}\nfunction $createTableCellNode(headerState = TableCellHeaderStates.NO_STATUS, colSpan = 1, width) {\n  return $applyNodeReplacement(new TableCellNode(headerState, colSpan, width));\n}\nfunction $isTableCellNode(node) {\n  return node instanceof TableCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst INSERT_TABLE_COMMAND = createCommand('INSERT_TABLE_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls.\n\nfunction formatDevErrorMessage(message) {\n  throw new Error(message);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TableRowNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'tablerow';\n  }\n  static clone(node) {\n    return new TableRowNode(node.__height, node.__key);\n  }\n  static importDOM() {\n    return {\n      tr: node => ({\n        conversion: $convertTableRowElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createTableRowNode().updateFromJSON(serializedNode);\n  }\n  updateFromJSON(serializedNode) {\n    return super.updateFromJSON(serializedNode).setHeight(serializedNode.height);\n  }\n  constructor(height, key) {\n    super(key);\n    this.__height = height;\n  }\n  exportJSON() {\n    const height = this.getHeight();\n    return {\n      ...super.exportJSON(),\n      ...(height === undefined ? undefined : {\n        height\n      })\n    };\n  }\n  createDOM(config) {\n    const element = document.createElement('tr');\n    if (this.__height) {\n      element.style.height = `${this.__height}px`;\n    }\n    addClassNamesToElement(element, config.theme.tableRow);\n    return element;\n  }\n  extractWithChild(child, selection, destination) {\n    return destination === 'html';\n  }\n  isShadowRoot() {\n    return true;\n  }\n  setHeight(height) {\n    const self = this.getWritable();\n    self.__height = height;\n    return self;\n  }\n  getHeight() {\n    return this.getLatest().__height;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__height !== this.__height;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction $convertTableRowElement(domNode) {\n  const domNode_ = domNode;\n  let height = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.height)) {\n    height = parseFloat(domNode_.style.height);\n  }\n  return {\n    after: children => $descendantsMatching(children, $isTableCellNode),\n    node: $createTableRowNode(height)\n  };\n}\nfunction $createTableRowNode(height) {\n  return $applyNodeReplacement(new TableRowNode(height));\n}\nfunction $isTableRowNode(node) {\n  return node instanceof TableRowNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nCAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\n\nfunction $createTableNodeWithDimensions(rowCount, columnCount, includeHeaders = true) {\n  const tableNode = $createTableNode();\n  for (let iRow = 0; iRow < rowCount; iRow++) {\n    const tableRowNode = $createTableRowNode();\n    for (let iColumn = 0; iColumn < columnCount; iColumn++) {\n      let headerState = TableCellHeaderStates.NO_STATUS;\n      if (typeof includeHeaders === 'object') {\n        if (iRow === 0 && includeHeaders.rows) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n        if (iColumn === 0 && includeHeaders.columns) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n      } else if (includeHeaders) {\n        if (iRow === 0) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n        if (iColumn === 0) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n      }\n      const tableCellNode = $createTableCellNode(headerState);\n      const paragraphNode = $createParagraphNode();\n      paragraphNode.append($createTextNode());\n      tableCellNode.append(paragraphNode);\n      tableRowNode.append(tableCellNode);\n    }\n    tableNode.append(tableRowNode);\n  }\n  return tableNode;\n}\nfunction $getTableCellNodeFromLexicalNode(startingNode) {\n  const node = $findMatchingParent(startingNode, n => $isTableCellNode(n));\n  if ($isTableCellNode(node)) {\n    return node;\n  }\n  return null;\n}\nfunction $getTableRowNodeFromTableCellNodeOrThrow(startingNode) {\n  const node = $findMatchingParent(startingNode, n => $isTableRowNode(n));\n  if ($isTableRowNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table row.');\n}\nfunction $getTableNodeFromLexicalNodeOrThrow(startingNode) {\n  const node = $findMatchingParent(startingNode, n => $isTableNode(n));\n  if ($isTableNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table.');\n}\nfunction $getTableRowIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableRowNode);\n  return tableNode.getChildren().findIndex(n => n.is(tableRowNode));\n}\nfunction $getTableColumnIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  return tableRowNode.getChildren().findIndex(n => n.is(tableCellNode));\n}\nfunction $getTableCellSiblingsFromTableCellNode(tableCellNode, table) {\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n  const {\n    x,\n    y\n  } = tableNode.getCordsFromCellNode(tableCellNode, table);\n  return {\n    above: tableNode.getCellNodeFromCords(x, y - 1, table),\n    below: tableNode.getCellNodeFromCords(x, y + 1, table),\n    left: tableNode.getCellNodeFromCords(x - 1, y, table),\n    right: tableNode.getCellNodeFromCords(x + 1, y, table)\n  };\n}\nfunction $removeTableRowAtIndex(tableNode, indexToDelete) {\n  const tableRows = tableNode.getChildren();\n  if (indexToDelete >= tableRows.length || indexToDelete < 0) {\n    throw new Error('Expected table cell to be inside of table row.');\n  }\n  const targetRowNode = tableRows[indexToDelete];\n  targetRowNode.remove();\n  return tableNode;\n}\n\n/**\n * @deprecated This function does not support merged cells. Use {@link $insertTableRowAtSelection} or {@link $insertTableRowAtNode} instead.\n */\nfunction $insertTableRow(tableNode, targetIndex, shouldInsertAfter = true, rowCount, table) {\n  const tableRows = tableNode.getChildren();\n  if (targetIndex >= tableRows.length || targetIndex < 0) {\n    throw new Error('Table row target index out of range');\n  }\n  const targetRowNode = tableRows[targetIndex];\n  if ($isTableRowNode(targetRowNode)) {\n    for (let r = 0; r < rowCount; r++) {\n      const tableRowCells = targetRowNode.getChildren();\n      const tableColumnCount = tableRowCells.length;\n      const newTableRowNode = $createTableRowNode();\n      for (let c = 0; c < tableColumnCount; c++) {\n        const tableCellFromTargetRow = tableRowCells[c];\n        if (!$isTableCellNode(tableCellFromTargetRow)) {\n          formatDevErrorMessage(`Expected table cell`);\n        }\n        const {\n          above,\n          below\n        } = $getTableCellSiblingsFromTableCellNode(tableCellFromTargetRow, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        const width = above && above.getWidth() || below && below.getWidth() || undefined;\n        if (above && above.hasHeaderState(TableCellHeaderStates.COLUMN) || below && below.hasHeaderState(TableCellHeaderStates.COLUMN)) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n        const tableCellNode = $createTableCellNode(headerState, 1, width);\n        tableCellNode.append($createParagraphNode());\n        newTableRowNode.append(tableCellNode);\n      }\n      if (shouldInsertAfter) {\n        targetRowNode.insertAfter(newTableRowNode);\n      } else {\n        targetRowNode.insertBefore(newTableRowNode);\n      }\n    }\n  } else {\n    throw new Error('Row before insertion index does not exist.');\n  }\n  return tableNode;\n}\nconst getHeaderState = (currentState, possibleState) => {\n  if (currentState === TableCellHeaderStates.BOTH || currentState === possibleState) {\n    return possibleState;\n  }\n  return TableCellHeaderStates.NO_STATUS;\n};\n\n/**\n * Inserts a table row before or after the current focus cell node,\n * taking into account any spans. If successful, returns the\n * inserted table row node.\n */\nfunction $insertTableRowAtSelection(insertAfter = true) {\n  const selection = $getSelection();\n  if (!($isRangeSelection(selection) || $isTableSelection(selection))) {\n    formatDevErrorMessage(`Expected a RangeSelection or TableSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell] = $getNodeTriplet(anchor);\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [, focusCellMap, anchorCellMap] = $computeTableMap(grid, focusCell, anchorCell);\n  const {\n    startRow: anchorStartRow\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  if (insertAfter) {\n    return $insertTableRowAtNode(anchorStartRow + anchorCell.__rowSpan > focusStartRow + focusCell.__rowSpan ? anchorCell : focusCell, true);\n  } else {\n    return $insertTableRowAtNode(focusStartRow < anchorStartRow ? focusCell : anchorCell, false);\n  }\n}\n\n/**\n * @deprecated renamed to {@link $insertTableRowAtSelection}\n */\nconst $insertTableRow__EXPERIMENTAL = $insertTableRowAtSelection;\n\n/**\n * Inserts a table row before or after the given cell node,\n * taking into account any spans. If successful, returns the\n * inserted table row node.\n */\nfunction $insertTableRowAtNode(cellNode, insertAfter = true) {\n  const [,, grid] = $getNodeTriplet(cellNode);\n  const [gridMap, cellMap] = $computeTableMap(grid, cellNode, cellNode);\n  const columnCount = gridMap[0].length;\n  const {\n    startRow: cellStartRow\n  } = cellMap;\n  let insertedRow = null;\n  if (insertAfter) {\n    const insertAfterEndRow = cellStartRow + cellNode.__rowSpan - 1;\n    const insertAfterEndRowMap = gridMap[insertAfterEndRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = insertAfterEndRowMap[i];\n      if (startRow + cell.__rowSpan - 1 <= insertAfterEndRow) {\n        const currentCell = insertAfterEndRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append($createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const insertAfterEndRowNode = grid.getChildAtIndex(insertAfterEndRow);\n    if (!$isTableRowNode(insertAfterEndRowNode)) {\n      formatDevErrorMessage(`insertAfterEndRow is not a TableRowNode`);\n    }\n    insertAfterEndRowNode.insertAfter(newRow);\n    insertedRow = newRow;\n  } else {\n    const insertBeforeStartRow = cellStartRow;\n    const insertBeforeStartRowMap = gridMap[insertBeforeStartRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = insertBeforeStartRowMap[i];\n      if (startRow === insertBeforeStartRow) {\n        const currentCell = insertBeforeStartRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append($createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const insertBeforeStartRowNode = grid.getChildAtIndex(insertBeforeStartRow);\n    if (!$isTableRowNode(insertBeforeStartRowNode)) {\n      formatDevErrorMessage(`insertBeforeStartRow is not a TableRowNode`);\n    }\n    insertBeforeStartRowNode.insertBefore(newRow);\n    insertedRow = newRow;\n  }\n  return insertedRow;\n}\n\n/**\n * @deprecated This function does not support merged cells. Use {@link $insertTableColumnAtSelection} or {@link $insertTableColumnAtNode} instead.\n */\nfunction $insertTableColumn(tableNode, targetIndex, shouldInsertAfter = true, columnCount, table) {\n  const tableRows = tableNode.getChildren();\n  const tableCellsToBeInserted = [];\n  for (let r = 0; r < tableRows.length; r++) {\n    const currentTableRowNode = tableRows[r];\n    if ($isTableRowNode(currentTableRowNode)) {\n      for (let c = 0; c < columnCount; c++) {\n        const tableRowChildren = currentTableRowNode.getChildren();\n        if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n          throw new Error('Table column target index out of range');\n        }\n        const targetCell = tableRowChildren[targetIndex];\n        if (!$isTableCellNode(targetCell)) {\n          formatDevErrorMessage(`Expected table cell`);\n        }\n        const {\n          left,\n          right\n        } = $getTableCellSiblingsFromTableCellNode(targetCell, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        if (left && left.hasHeaderState(TableCellHeaderStates.ROW) || right && right.hasHeaderState(TableCellHeaderStates.ROW)) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n        const newTableCell = $createTableCellNode(headerState);\n        newTableCell.append($createParagraphNode());\n        tableCellsToBeInserted.push({\n          newTableCell,\n          targetCell\n        });\n      }\n    }\n  }\n  tableCellsToBeInserted.forEach(({\n    newTableCell,\n    targetCell\n  }) => {\n    if (shouldInsertAfter) {\n      targetCell.insertAfter(newTableCell);\n    } else {\n      targetCell.insertBefore(newTableCell);\n    }\n  });\n  return tableNode;\n}\n\n/**\n * Inserts a column before or after the current focus cell node,\n * taking into account any spans. If successful, returns the\n * first inserted cell node.\n */\nfunction $insertTableColumnAtSelection(insertAfter = true) {\n  const selection = $getSelection();\n  if (!($isRangeSelection(selection) || $isTableSelection(selection))) {\n    formatDevErrorMessage(`Expected a RangeSelection or TableSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell] = $getNodeTriplet(anchor);\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [, focusCellMap, anchorCellMap] = $computeTableMap(grid, focusCell, anchorCell);\n  const {\n    startColumn: anchorStartColumn\n  } = anchorCellMap;\n  const {\n    startColumn: focusStartColumn\n  } = focusCellMap;\n  if (insertAfter) {\n    return $insertTableColumnAtNode(anchorStartColumn + anchorCell.__colSpan > focusStartColumn + focusCell.__colSpan ? anchorCell : focusCell, true);\n  } else {\n    return $insertTableColumnAtNode(focusStartColumn < anchorStartColumn ? focusCell : anchorCell, false);\n  }\n}\n\n/**\n * @deprecated renamed to {@link $insertTableColumnAtSelection}\n */\nconst $insertTableColumn__EXPERIMENTAL = $insertTableColumnAtSelection;\n\n/**\n * Inserts a column before or after the given cell node,\n * taking into account any spans. If successful, returns the\n * first inserted cell node.\n */\nfunction $insertTableColumnAtNode(cellNode, insertAfter = true, shouldSetSelection = true) {\n  const [,, grid] = $getNodeTriplet(cellNode);\n  const [gridMap, cellMap] = $computeTableMap(grid, cellNode, cellNode);\n  const rowCount = gridMap.length;\n  const {\n    startColumn\n  } = cellMap;\n  const insertAfterColumn = insertAfter ? startColumn + cellNode.__colSpan - 1 : startColumn - 1;\n  const gridFirstChild = grid.getFirstChild();\n  if (!$isTableRowNode(gridFirstChild)) {\n    formatDevErrorMessage(`Expected firstTable child to be a row`);\n  }\n  let firstInsertedCell = null;\n  function $createTableCellNodeForInsertTableColumn(headerState = TableCellHeaderStates.NO_STATUS) {\n    const cell = $createTableCellNode(headerState).append($createParagraphNode());\n    if (firstInsertedCell === null) {\n      firstInsertedCell = cell;\n    }\n    return cell;\n  }\n  let loopRow = gridFirstChild;\n  rowLoop: for (let i = 0; i < rowCount; i++) {\n    if (i !== 0) {\n      const currentRow = loopRow.getNextSibling();\n      if (!$isTableRowNode(currentRow)) {\n        formatDevErrorMessage(`Expected row nextSibling to be a row`);\n      }\n      loopRow = currentRow;\n    }\n    const rowMap = gridMap[i];\n    const currentCellHeaderState = rowMap[insertAfterColumn < 0 ? 0 : insertAfterColumn].cell.__headerState;\n    const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.ROW);\n    if (insertAfterColumn < 0) {\n      $insertFirst(loopRow, $createTableCellNodeForInsertTableColumn(headerState));\n      continue;\n    }\n    const {\n      cell: currentCell,\n      startColumn: currentStartColumn,\n      startRow: currentStartRow\n    } = rowMap[insertAfterColumn];\n    if (currentStartColumn + currentCell.__colSpan - 1 <= insertAfterColumn) {\n      let insertAfterCell = currentCell;\n      let insertAfterCellRowStart = currentStartRow;\n      let prevCellIndex = insertAfterColumn;\n      while (insertAfterCellRowStart !== i && insertAfterCell.__rowSpan > 1) {\n        prevCellIndex -= currentCell.__colSpan;\n        if (prevCellIndex >= 0) {\n          const {\n            cell: cell_,\n            startRow: startRow_\n          } = rowMap[prevCellIndex];\n          insertAfterCell = cell_;\n          insertAfterCellRowStart = startRow_;\n        } else {\n          loopRow.append($createTableCellNodeForInsertTableColumn(headerState));\n          continue rowLoop;\n        }\n      }\n      insertAfterCell.insertAfter($createTableCellNodeForInsertTableColumn(headerState));\n    } else {\n      currentCell.setColSpan(currentCell.__colSpan + 1);\n    }\n  }\n  if (firstInsertedCell !== null && shouldSetSelection) {\n    $moveSelectionToCell(firstInsertedCell);\n  }\n  const colWidths = grid.getColWidths();\n  if (colWidths) {\n    const newColWidths = [...colWidths];\n    const columnIndex = insertAfterColumn < 0 ? 0 : insertAfterColumn;\n    const newWidth = newColWidths[columnIndex];\n    newColWidths.splice(columnIndex, 0, newWidth);\n    grid.setColWidths(newColWidths);\n  }\n  return firstInsertedCell;\n}\n\n/**\n * @deprecated This function does not support merged cells. Use {@link $deleteTableColumnAtSelection} instead.\n */\nfunction $deleteTableColumn(tableNode, targetIndex) {\n  const tableRows = tableNode.getChildren();\n  for (let i = 0; i < tableRows.length; i++) {\n    const currentTableRowNode = tableRows[i];\n    if ($isTableRowNode(currentTableRowNode)) {\n      const tableRowChildren = currentTableRowNode.getChildren();\n      if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n        throw new Error('Table column target index out of range');\n      }\n      tableRowChildren[targetIndex].remove();\n    }\n  }\n  return tableNode;\n}\nfunction $deleteTableRowAtSelection() {\n  const selection = $getSelection();\n  if (!($isRangeSelection(selection) || $isTableSelection(selection))) {\n    formatDevErrorMessage(`Expected a RangeSelection or TableSelection`);\n  }\n  const [anchor, focus] = selection.isBackward() ? [selection.focus.getNode(), selection.anchor.getNode()] : [selection.anchor.getNode(), selection.focus.getNode()];\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startRow: anchorStartRow\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n  if (gridMap.length === focusEndRow - anchorStartRow + 1) {\n    // Empty grid\n    grid.remove();\n    return;\n  }\n  const columnCount = gridMap[0].length;\n  const nextRow = gridMap[focusEndRow + 1];\n  const nextRowNode = grid.getChildAtIndex(focusEndRow + 1);\n  for (let row = focusEndRow; row >= anchorStartRow; row--) {\n    for (let column = columnCount - 1; column >= 0; column--) {\n      const {\n        cell,\n        startRow: cellStartRow,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn !== column) {\n        // Don't repeat work for the same Cell\n        continue;\n      }\n      // Rows overflowing top or bottom have to be trimmed\n      if (cellStartRow < anchorStartRow || cellStartRow + cell.__rowSpan - 1 > focusEndRow) {\n        const intersectionStart = Math.max(cellStartRow, anchorStartRow);\n        const intersectionEnd = Math.min(cell.__rowSpan + cellStartRow - 1, focusEndRow);\n        const overflowRowsCount = intersectionStart <= intersectionEnd ? intersectionEnd - intersectionStart + 1 : 0;\n        cell.setRowSpan(cell.__rowSpan - overflowRowsCount);\n      }\n      // Rows overflowing bottom have to be moved to the next row\n      if (cellStartRow >= anchorStartRow && cellStartRow + cell.__rowSpan - 1 > focusEndRow &&\n      // Handle overflow only once\n      row === focusEndRow) {\n        if (!(nextRowNode !== null)) {\n          formatDevErrorMessage(`Expected nextRowNode not to be null`);\n        }\n        let insertAfterCell = null;\n        for (let columnIndex = 0; columnIndex < column; columnIndex++) {\n          const currentCellMap = nextRow[columnIndex];\n          const currentCell = currentCellMap.cell;\n          // Checking the cell having startRow as same as nextRow\n          if (currentCellMap.startRow === row + 1) {\n            insertAfterCell = currentCell;\n          }\n          if (currentCell.__colSpan > 1) {\n            columnIndex += currentCell.__colSpan - 1;\n          }\n        }\n        if (insertAfterCell === null) {\n          $insertFirst(nextRowNode, cell);\n        } else {\n          insertAfterCell.insertAfter(cell);\n        }\n      }\n    }\n    const rowNode = grid.getChildAtIndex(row);\n    if (!$isTableRowNode(rowNode)) {\n      formatDevErrorMessage(`Expected TableNode childAtIndex(${String(row)}) to be RowNode`);\n    }\n    rowNode.remove();\n  }\n  if (nextRow !== undefined) {\n    const {\n      cell\n    } = nextRow[0];\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = gridMap[anchorStartRow - 1];\n    const {\n      cell\n    } = previousRow[0];\n    $moveSelectionToCell(cell);\n  }\n}\n\n/**\n * @deprecated renamed to {@link $deleteTableRowAtSelection}\n */\nconst $deleteTableRow__EXPERIMENTAL = $deleteTableRowAtSelection;\nfunction $deleteTableColumnAtSelection() {\n  const selection = $getSelection();\n  if (!($isRangeSelection(selection) || $isTableSelection(selection))) {\n    formatDevErrorMessage(`Expected a RangeSelection or TableSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startColumn: anchorStartColumn\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow,\n    startColumn: focusStartColumn\n  } = focusCellMap;\n  const startColumn = Math.min(anchorStartColumn, focusStartColumn);\n  const endColumn = Math.max(anchorStartColumn + anchorCell.__colSpan - 1, focusStartColumn + focusCell.__colSpan - 1);\n  const selectedColumnCount = endColumn - startColumn + 1;\n  const columnCount = gridMap[0].length;\n  if (columnCount === endColumn - startColumn + 1) {\n    // Empty grid\n    grid.selectPrevious();\n    grid.remove();\n    return;\n  }\n  const rowCount = gridMap.length;\n  for (let row = 0; row < rowCount; row++) {\n    for (let column = startColumn; column <= endColumn; column++) {\n      const {\n        cell,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn < startColumn) {\n        if (column === startColumn) {\n          const overflowLeft = startColumn - cellStartColumn;\n          // Overflowing left\n          cell.setColSpan(cell.__colSpan -\n          // Possible overflow right too\n          Math.min(selectedColumnCount, cell.__colSpan - overflowLeft));\n        }\n      } else if (cellStartColumn + cell.__colSpan - 1 > endColumn) {\n        if (column === endColumn) {\n          // Overflowing right\n          const inSelectedArea = endColumn - cellStartColumn + 1;\n          cell.setColSpan(cell.__colSpan - inSelectedArea);\n        }\n      } else {\n        cell.remove();\n      }\n    }\n  }\n  const focusRowMap = gridMap[focusStartRow];\n  const nextColumn = anchorStartColumn > focusStartColumn ? focusRowMap[anchorStartColumn + anchorCell.__colSpan] : focusRowMap[focusStartColumn + focusCell.__colSpan];\n  if (nextColumn !== undefined) {\n    const {\n      cell\n    } = nextColumn;\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = focusStartColumn < anchorStartColumn ? focusRowMap[focusStartColumn - 1] : focusRowMap[anchorStartColumn - 1];\n    const {\n      cell\n    } = previousRow;\n    $moveSelectionToCell(cell);\n  }\n  const colWidths = grid.getColWidths();\n  if (colWidths) {\n    const newColWidths = [...colWidths];\n    newColWidths.splice(startColumn, selectedColumnCount);\n    grid.setColWidths(newColWidths);\n  }\n}\n\n/**\n * @deprecated renamed to {@link $deleteTableColumnAtSelection}\n */\nconst $deleteTableColumn__EXPERIMENTAL = $deleteTableColumnAtSelection;\nfunction $moveSelectionToCell(cell) {\n  const firstDescendant = cell.getFirstDescendant();\n  if (firstDescendant == null) {\n    cell.selectStart();\n  } else {\n    firstDescendant.getParentOrThrow().selectStart();\n  }\n}\nfunction $insertFirst(parent, node) {\n  const firstChild = parent.getFirstChild();\n  if (firstChild !== null) {\n    firstChild.insertBefore(node);\n  } else {\n    parent.append(node);\n  }\n}\nfunction $mergeCells(cellNodes) {\n  if (cellNodes.length === 0) {\n    return null;\n  }\n\n  // Find the table node\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(cellNodes[0]);\n  const [gridMap] = $computeTableMapSkipCellCheck(tableNode, null, null);\n\n  // Find the boundaries of the selection including merged cells\n  let minRow = Infinity;\n  let maxRow = -Infinity;\n  let minCol = Infinity;\n  let maxCol = -Infinity;\n\n  // First pass: find the actual boundaries considering merged cells\n  const processedCells = new Set();\n  for (const row of gridMap) {\n    for (const mapCell of row) {\n      if (!mapCell || !mapCell.cell) {\n        continue;\n      }\n      const cellKey = mapCell.cell.getKey();\n      if (processedCells.has(cellKey)) {\n        continue;\n      }\n      if (cellNodes.some(cell => cell.is(mapCell.cell))) {\n        processedCells.add(cellKey);\n        // Get the actual position of this cell in the grid\n        const cellStartRow = mapCell.startRow;\n        const cellStartCol = mapCell.startColumn;\n        const cellRowSpan = mapCell.cell.__rowSpan || 1;\n        const cellColSpan = mapCell.cell.__colSpan || 1;\n\n        // Update boundaries considering the cell's actual position and span\n        minRow = Math.min(minRow, cellStartRow);\n        maxRow = Math.max(maxRow, cellStartRow + cellRowSpan - 1);\n        minCol = Math.min(minCol, cellStartCol);\n        maxCol = Math.max(maxCol, cellStartCol + cellColSpan - 1);\n      }\n    }\n  }\n\n  // Validate boundaries\n  if (minRow === Infinity || minCol === Infinity) {\n    return null;\n  }\n\n  // The total span of the merged cell\n  const totalRowSpan = maxRow - minRow + 1;\n  const totalColSpan = maxCol - minCol + 1;\n\n  // Use the top-left cell as the target cell\n  const targetCellMap = gridMap[minRow][minCol];\n  if (!targetCellMap.cell) {\n    return null;\n  }\n  const targetCell = targetCellMap.cell;\n\n  // Set the spans for the target cell\n  targetCell.setColSpan(totalColSpan);\n  targetCell.setRowSpan(totalRowSpan);\n\n  // Move content from other cells to the target cell\n  const seenCells = new Set([targetCell.getKey()]);\n\n  // Second pass: merge content and remove other cells\n  for (let row = minRow; row <= maxRow; row++) {\n    for (let col = minCol; col <= maxCol; col++) {\n      const mapCell = gridMap[row][col];\n      if (!mapCell.cell) {\n        continue;\n      }\n      const currentCell = mapCell.cell;\n      const key = currentCell.getKey();\n      if (!seenCells.has(key)) {\n        seenCells.add(key);\n        const isEmpty = $cellContainsEmptyParagraph(currentCell);\n        if (!isEmpty) {\n          targetCell.append(...currentCell.getChildren());\n        }\n        currentCell.remove();\n      }\n    }\n  }\n\n  // Ensure target cell has content\n  if (targetCell.getChildrenSize() === 0) {\n    targetCell.append($createParagraphNode());\n  }\n  return targetCell;\n}\nfunction $cellContainsEmptyParagraph(cell) {\n  if (cell.getChildrenSize() !== 1) {\n    return false;\n  }\n  const firstChild = cell.getFirstChildOrThrow();\n  if (!$isParagraphNode(firstChild) || !firstChild.isEmpty()) {\n    return false;\n  }\n  return true;\n}\nfunction $unmergeCell() {\n  const selection = $getSelection();\n  if (!($isRangeSelection(selection) || $isTableSelection(selection))) {\n    formatDevErrorMessage(`Expected a RangeSelection or TableSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const cellNode = $findMatchingParent(anchor, $isTableCellNode);\n  if (!$isTableCellNode(cellNode)) {\n    formatDevErrorMessage(`Expected to find a parent TableCellNode`);\n  }\n  return $unmergeCellNode(cellNode);\n}\nfunction $unmergeCellNode(cellNode) {\n  const [cell, row, grid] = $getNodeTriplet(cellNode);\n  const colSpan = cell.__colSpan;\n  const rowSpan = cell.__rowSpan;\n  if (colSpan === 1 && rowSpan === 1) {\n    return;\n  }\n  const [map, cellMap] = $computeTableMap(grid, cell, cell);\n  const {\n    startColumn,\n    startRow\n  } = cellMap;\n  // Create a heuristic for what the style of the unmerged cells should be\n  // based on whether every row or column already had that state before the\n  // unmerge.\n  const baseColStyle = cell.__headerState & TableCellHeaderStates.COLUMN;\n  const colStyles = Array.from({\n    length: colSpan\n  }, (_v, i) => {\n    let colStyle = baseColStyle;\n    for (let rowIdx = 0; colStyle !== 0 && rowIdx < map.length; rowIdx++) {\n      colStyle &= map[rowIdx][i + startColumn].cell.__headerState;\n    }\n    return colStyle;\n  });\n  const baseRowStyle = cell.__headerState & TableCellHeaderStates.ROW;\n  const rowStyles = Array.from({\n    length: rowSpan\n  }, (_v, i) => {\n    let rowStyle = baseRowStyle;\n    for (let colIdx = 0; rowStyle !== 0 && colIdx < map[0].length; colIdx++) {\n      rowStyle &= map[i + startRow][colIdx].cell.__headerState;\n    }\n    return rowStyle;\n  });\n  if (colSpan > 1) {\n    for (let i = 1; i < colSpan; i++) {\n      cell.insertAfter($createTableCellNode(colStyles[i] | rowStyles[0]).append($createParagraphNode()));\n    }\n    cell.setColSpan(1);\n  }\n  if (rowSpan > 1) {\n    let currentRowNode;\n    for (let i = 1; i < rowSpan; i++) {\n      const currentRow = startRow + i;\n      const currentRowMap = map[currentRow];\n      currentRowNode = (currentRowNode || row).getNextSibling();\n      if (!$isTableRowNode(currentRowNode)) {\n        formatDevErrorMessage(`Expected row next sibling to be a row`);\n      }\n      let insertAfterCell = null;\n      for (let column = 0; column < startColumn; column++) {\n        const currentCellMap = currentRowMap[column];\n        const currentCell = currentCellMap.cell;\n        if (currentCellMap.startRow === currentRow) {\n          insertAfterCell = currentCell;\n        }\n        if (currentCell.__colSpan > 1) {\n          column += currentCell.__colSpan - 1;\n        }\n      }\n      if (insertAfterCell === null) {\n        for (let j = colSpan - 1; j >= 0; j--) {\n          $insertFirst(currentRowNode, $createTableCellNode(colStyles[j] | rowStyles[i]).append($createParagraphNode()));\n        }\n      } else {\n        for (let j = colSpan - 1; j >= 0; j--) {\n          insertAfterCell.insertAfter($createTableCellNode(colStyles[j] | rowStyles[i]).append($createParagraphNode()));\n        }\n      }\n    }\n    cell.setRowSpan(1);\n  }\n}\nfunction $computeTableMap(tableNode, cellA, cellB) {\n  const [tableMap, cellAValue, cellBValue] = $computeTableMapSkipCellCheck(tableNode, cellA, cellB);\n  if (!(cellAValue !== null)) {\n    formatDevErrorMessage(`Anchor not found in Table`);\n  }\n  if (!(cellBValue !== null)) {\n    formatDevErrorMessage(`Focus not found in Table`);\n  }\n  return [tableMap, cellAValue, cellBValue];\n}\nfunction $computeTableMapSkipCellCheck(tableNode, cellA, cellB) {\n  const tableMap = [];\n  let cellAValue = null;\n  let cellBValue = null;\n  function getMapRow(i) {\n    let row = tableMap[i];\n    if (row === undefined) {\n      tableMap[i] = row = [];\n    }\n    return row;\n  }\n  const gridChildren = tableNode.getChildren();\n  for (let rowIdx = 0; rowIdx < gridChildren.length; rowIdx++) {\n    const row = gridChildren[rowIdx];\n    if (!$isTableRowNode(row)) {\n      formatDevErrorMessage(`Expected TableNode children to be TableRowNode`);\n    }\n    const startMapRow = getMapRow(rowIdx);\n    for (let cell = row.getFirstChild(), colIdx = 0; cell != null; cell = cell.getNextSibling()) {\n      if (!$isTableCellNode(cell)) {\n        formatDevErrorMessage(`Expected TableRowNode children to be TableCellNode`);\n      } // Skip past any columns that were merged from a higher row\n      while (startMapRow[colIdx] !== undefined) {\n        colIdx++;\n      }\n      const value = {\n        cell,\n        startColumn: colIdx,\n        startRow: rowIdx\n      };\n      const {\n        __rowSpan: rowSpan,\n        __colSpan: colSpan\n      } = cell;\n      for (let j = 0; j < rowSpan; j++) {\n        if (rowIdx + j >= gridChildren.length) {\n          // The table is non-rectangular with a rowSpan\n          // below the last <tr> in the table.\n          // We should probably handle this with a node transform\n          // to ensure that tables are always rectangular but this\n          // will avoid crashes such as #6584\n          // Note that there are probably still latent bugs\n          // regarding colSpan or general cell count mismatches.\n          break;\n        }\n        const mapRow = getMapRow(rowIdx + j);\n        for (let i = 0; i < colSpan; i++) {\n          mapRow[colIdx + i] = value;\n        }\n      }\n      if (cellA !== null && cellAValue === null && cellA.is(cell)) {\n        cellAValue = value;\n      }\n      if (cellB !== null && cellBValue === null && cellB.is(cell)) {\n        cellBValue = value;\n      }\n    }\n  }\n  return [tableMap, cellAValue, cellBValue];\n}\nfunction $getNodeTriplet(source) {\n  let cell;\n  if (source instanceof TableCellNode) {\n    cell = source;\n  } else if ('__type' in source) {\n    const cell_ = $findMatchingParent(source, $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      formatDevErrorMessage(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  } else {\n    const cell_ = $findMatchingParent(source.getNode(), $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      formatDevErrorMessage(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  }\n  const row = cell.getParent();\n  if (!$isTableRowNode(row)) {\n    formatDevErrorMessage(`Expected TableCellNode to have a parent TableRowNode`);\n  }\n  const grid = row.getParent();\n  if (!$isTableNode(grid)) {\n    formatDevErrorMessage(`Expected TableRowNode to have a parent TableNode`);\n  }\n  return [cell, row, grid];\n}\nfunction $computeTableCellRectSpans(map, boundary) {\n  const {\n    minColumn,\n    maxColumn,\n    minRow,\n    maxRow\n  } = boundary;\n  let topSpan = 1;\n  let leftSpan = 1;\n  let rightSpan = 1;\n  let bottomSpan = 1;\n  const topRow = map[minRow];\n  const bottomRow = map[maxRow];\n  for (let col = minColumn; col <= maxColumn; col++) {\n    topSpan = Math.max(topSpan, topRow[col].cell.__rowSpan);\n    bottomSpan = Math.max(bottomSpan, bottomRow[col].cell.__rowSpan);\n  }\n  for (let row = minRow; row <= maxRow; row++) {\n    leftSpan = Math.max(leftSpan, map[row][minColumn].cell.__colSpan);\n    rightSpan = Math.max(rightSpan, map[row][maxColumn].cell.__colSpan);\n  }\n  return {\n    bottomSpan,\n    leftSpan,\n    rightSpan,\n    topSpan\n  };\n}\nfunction $computeTableCellRectBoundary(map, cellAMap, cellBMap) {\n  // Initial boundaries based on the anchor and focus cells\n  let minColumn = Math.min(cellAMap.startColumn, cellBMap.startColumn);\n  let minRow = Math.min(cellAMap.startRow, cellBMap.startRow);\n  let maxColumn = Math.max(cellAMap.startColumn + cellAMap.cell.__colSpan - 1, cellBMap.startColumn + cellBMap.cell.__colSpan - 1);\n  let maxRow = Math.max(cellAMap.startRow + cellAMap.cell.__rowSpan - 1, cellBMap.startRow + cellBMap.cell.__rowSpan - 1);\n\n  // Keep expanding until we have a complete rectangle\n  let hasChanges;\n  do {\n    hasChanges = false;\n\n    // Check all cells in the table\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[0].length; col++) {\n        const cell = map[row][col];\n        if (!cell) {\n          continue;\n        }\n        const cellEndCol = cell.startColumn + cell.cell.__colSpan - 1;\n        const cellEndRow = cell.startRow + cell.cell.__rowSpan - 1;\n\n        // Check if this cell intersects with our current selection rectangle\n        const intersectsHorizontally = cell.startColumn <= maxColumn && cellEndCol >= minColumn;\n        const intersectsVertically = cell.startRow <= maxRow && cellEndRow >= minRow;\n\n        // If the cell intersects either horizontally or vertically\n        if (intersectsHorizontally && intersectsVertically) {\n          // Expand boundaries to include this cell completely\n          const newMinColumn = Math.min(minColumn, cell.startColumn);\n          const newMaxColumn = Math.max(maxColumn, cellEndCol);\n          const newMinRow = Math.min(minRow, cell.startRow);\n          const newMaxRow = Math.max(maxRow, cellEndRow);\n\n          // Check if boundaries changed\n          if (newMinColumn !== minColumn || newMaxColumn !== maxColumn || newMinRow !== minRow || newMaxRow !== maxRow) {\n            minColumn = newMinColumn;\n            maxColumn = newMaxColumn;\n            minRow = newMinRow;\n            maxRow = newMaxRow;\n            hasChanges = true;\n          }\n        }\n      }\n    }\n  } while (hasChanges);\n  return {\n    maxColumn,\n    maxRow,\n    minColumn,\n    minRow\n  };\n}\nfunction $getTableCellNodeRect(tableCellNode) {\n  const [cellNode,, gridNode] = $getNodeTriplet(tableCellNode);\n  const rows = gridNode.getChildren();\n  const rowCount = rows.length;\n  const columnCount = rows[0].getChildren().length;\n\n  // Create a matrix of the same size as the table to track the position of each cell\n  const cellMatrix = new Array(rowCount);\n  for (let i = 0; i < rowCount; i++) {\n    cellMatrix[i] = new Array(columnCount);\n  }\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    const row = rows[rowIndex];\n    const cells = row.getChildren();\n    let columnIndex = 0;\n    for (let cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n      // Find the next available position in the matrix, skip the position of merged cells\n      while (cellMatrix[rowIndex][columnIndex]) {\n        columnIndex++;\n      }\n      const cell = cells[cellIndex];\n      const rowSpan = cell.__rowSpan || 1;\n      const colSpan = cell.__colSpan || 1;\n\n      // Put the cell into the corresponding position in the matrix\n      for (let i = 0; i < rowSpan; i++) {\n        for (let j = 0; j < colSpan; j++) {\n          cellMatrix[rowIndex + i][columnIndex + j] = cell;\n        }\n      }\n\n      // Return to the original index, row span and column span of the cell.\n      if (cellNode === cell) {\n        return {\n          colSpan,\n          columnIndex,\n          rowIndex,\n          rowSpan\n        };\n      }\n      columnIndex += colSpan;\n    }\n  }\n  return null;\n}\n\nfunction $getCellNodes(tableSelection) {\n  const [[anchorNode, anchorCell, anchorRow, anchorTable], [focusNode, focusCell, focusRow, focusTable]] = ['anchor', 'focus'].map(k => {\n    const node = tableSelection[k].getNode();\n    const cellNode = $findMatchingParent(node, $isTableCellNode);\n    if (!$isTableCellNode(cellNode)) {\n      formatDevErrorMessage(`Expected TableSelection ${k} to be (or a child of) TableCellNode, got key ${node.getKey()} of type ${node.getType()}`);\n    }\n    const rowNode = cellNode.getParent();\n    if (!$isTableRowNode(rowNode)) {\n      formatDevErrorMessage(`Expected TableSelection ${k} cell parent to be a TableRowNode`);\n    }\n    const tableNode = rowNode.getParent();\n    if (!$isTableNode(tableNode)) {\n      formatDevErrorMessage(`Expected TableSelection ${k} row parent to be a TableNode`);\n    }\n    return [node, cellNode, rowNode, tableNode];\n  });\n  // TODO: nested tables may violate this\n  if (!anchorTable.is(focusTable)) {\n    formatDevErrorMessage(`Expected TableSelection anchor and focus to be in the same table`);\n  }\n  return {\n    anchorCell,\n    anchorNode,\n    anchorRow,\n    anchorTable,\n    focusCell,\n    focusNode,\n    focusRow,\n    focusTable\n  };\n}\nclass TableSelection {\n  constructor(tableKey, anchor, focus) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.dirty = false;\n    this.tableKey = tableKey;\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n\n  /**\n   * {@link $createTableSelection} unfortunately makes it very easy to create\n   * nonsense selections, so we have a method to see if the selection probably\n   * makes sense.\n   *\n   * @returns true if the TableSelection is (probably) valid\n   */\n  isValid() {\n    return this.tableKey !== 'root' && this.anchor.key !== 'root' && this.anchor.type === 'element' && this.focus.key !== 'root' && this.focus.type === 'element';\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    return $isTableSelection(selection) && this.tableKey === selection.tableKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n  set(tableKey, anchorCellKey, focusCellKey) {\n    // note: closure compiler's acorn does not support ||=\n    this.dirty = this.dirty || tableKey !== this.tableKey || anchorCellKey !== this.anchor.key || focusCellKey !== this.focus.key;\n    this.tableKey = tableKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n  clone() {\n    return new TableSelection(this.tableKey, $createPoint(this.anchor.key, this.anchor.offset, this.anchor.type), $createPoint(this.focus.key, this.focus.offset, this.focus.type));\n  }\n  isCollapsed() {\n    return false;\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection.\n   * This will be true if any paragraph in table cells has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    let format = 0;\n    const cellNodes = this.getNodes().filter($isTableCellNode);\n    cellNodes.forEach(cellNode => {\n      const paragraph = cellNode.getFirstChild();\n      if ($isParagraphNode(paragraph)) {\n        format |= paragraph.getTextFormat();\n      }\n    });\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (format & formatFlag) !== 0;\n  }\n  insertNodes(nodes) {\n    const focusNode = this.focus.getNode();\n    if (!$isElementNode(focusNode)) {\n      formatDevErrorMessage(`Expected TableSelection focus to be an ElementNode`);\n    }\n    const selection = $normalizeSelection__EXPERIMENTAL(focusNode.select(0, focusNode.getChildrenSize()));\n    selection.insertNodes(nodes);\n  }\n\n  // TODO Deprecate this method. It's confusing when used with colspan|rowspan\n  getShape() {\n    const {\n      anchorCell,\n      focusCell\n    } = $getCellNodes(this);\n    const anchorCellNodeRect = $getTableCellNodeRect(anchorCell);\n    if (!(anchorCellNodeRect !== null)) {\n      formatDevErrorMessage(`getCellRect: expected to find AnchorNode`);\n    }\n    const focusCellNodeRect = $getTableCellNodeRect(focusCell);\n    if (!(focusCellNodeRect !== null)) {\n      formatDevErrorMessage(`getCellRect: expected to find focusCellNode`);\n    }\n    const startX = Math.min(anchorCellNodeRect.columnIndex, focusCellNodeRect.columnIndex);\n    const stopX = Math.max(anchorCellNodeRect.columnIndex + anchorCellNodeRect.colSpan - 1, focusCellNodeRect.columnIndex + focusCellNodeRect.colSpan - 1);\n    const startY = Math.min(anchorCellNodeRect.rowIndex, focusCellNodeRect.rowIndex);\n    const stopY = Math.max(anchorCellNodeRect.rowIndex + anchorCellNodeRect.rowSpan - 1, focusCellNodeRect.rowIndex + focusCellNodeRect.rowSpan - 1);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n  getNodes() {\n    if (!this.isValid()) {\n      return [];\n    }\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const {\n      anchorTable: tableNode,\n      anchorCell,\n      focusCell\n    } = $getCellNodes(this);\n    const focusCellGrid = focusCell.getParents()[1];\n    if (focusCellGrid !== tableNode) {\n      if (!tableNode.isParentOf(focusCell)) {\n        // focus is on higher Grid level than anchor\n        const gridParent = tableNode.getParent();\n        if (!(gridParent != null)) {\n          formatDevErrorMessage(`Expected gridParent to have a parent`);\n        }\n        this.set(this.tableKey, gridParent.getKey(), focusCell.getKey());\n      } else {\n        // anchor is on higher Grid level than focus\n        const focusCellParent = focusCellGrid.getParent();\n        if (!(focusCellParent != null)) {\n          formatDevErrorMessage(`Expected focusCellParent to have a parent`);\n        }\n        this.set(this.tableKey, focusCell.getKey(), focusCellParent.getKey());\n      }\n      return this.getNodes();\n    }\n\n    // TODO Mapping the whole Grid every time not efficient. We need to compute the entire state only\n    // once (on load) and iterate on it as updates occur. However, to do this we need to have the\n    // ability to store a state. Killing TableSelection and moving the logic to the plugin would make\n    // this possible.\n    const [map, cellAMap, cellBMap] = $computeTableMap(tableNode, anchorCell, focusCell);\n    const {\n      minColumn,\n      maxColumn,\n      minRow,\n      maxRow\n    } = $computeTableCellRectBoundary(map, cellAMap, cellBMap);\n\n    // We use a Map here because merged cells in the grid would otherwise\n    // show up multiple times in the nodes array\n    const nodeMap = new Map([[tableNode.getKey(), tableNode]]);\n    let lastRow = null;\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minColumn; j <= maxColumn; j++) {\n        const {\n          cell\n        } = map[i][j];\n        const currentRow = cell.getParent();\n        if (!$isTableRowNode(currentRow)) {\n          formatDevErrorMessage(`Expected TableCellNode parent to be a TableRowNode`);\n        }\n        if (currentRow !== lastRow) {\n          nodeMap.set(currentRow.getKey(), currentRow);\n          lastRow = currentRow;\n        }\n        if (!nodeMap.has(cell.getKey())) {\n          $visitRecursively(cell, childNode => {\n            nodeMap.set(childNode.getKey(), childNode);\n          });\n        }\n      }\n    }\n    const nodes = Array.from(nodeMap.values());\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes().filter(node => $isTableCellNode(node));\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      const row = node.__parent;\n      const nextRow = (nodes[i + 1] || {}).__parent;\n      textContent += node.getTextContent() + (nextRow !== row ? '\\n' : '\\t');\n    }\n    return textContent;\n  }\n}\nfunction $isTableSelection(x) {\n  return x instanceof TableSelection;\n}\nfunction $createTableSelection() {\n  // TODO this is a suboptimal design, it doesn't make sense to have\n  // a table selection that isn't associated with a table. This\n  // constructor should have required arguments and in true we\n  // should check that they point to a table and are element points to\n  // cell nodes of that table.\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new TableSelection('root', anchor, focus);\n}\nfunction $createTableSelectionFrom(tableNode, anchorCell, focusCell) {\n  const tableNodeKey = tableNode.getKey();\n  const anchorCellKey = anchorCell.getKey();\n  const focusCellKey = focusCell.getKey();\n  {\n    if (!tableNode.isAttached()) {\n      formatDevErrorMessage(`$createTableSelectionFrom: tableNode ${tableNodeKey} is not attached`);\n    }\n    if (!tableNode.is($findTableNode(anchorCell))) {\n      formatDevErrorMessage(`$createTableSelectionFrom: anchorCell ${anchorCellKey} is not in table ${tableNodeKey}`);\n    }\n    if (!tableNode.is($findTableNode(focusCell))) {\n      formatDevErrorMessage(`$createTableSelectionFrom: focusCell ${focusCellKey} is not in table ${tableNodeKey}`);\n    } // TODO: Check for rectangular grid\n  }\n  const prevSelection = $getSelection();\n  const nextSelection = $isTableSelection(prevSelection) ? prevSelection.clone() : $createTableSelection();\n  nextSelection.set(tableNode.getKey(), anchorCell.getKey(), focusCell.getKey());\n  return nextSelection;\n}\n\n/**\n * Depth first visitor\n * @param node The starting node\n * @param $visit The function to call for each node. If the function returns false, then children of this node will not be explored\n */\nfunction $visitRecursively(node, $visit) {\n  const stack = [[node]];\n  for (let currentArray = stack.at(-1); currentArray !== undefined && stack.length > 0; currentArray = stack.at(-1)) {\n    const currentNode = currentArray.pop();\n    if (currentNode === undefined) {\n      stack.pop();\n    } else if ($visit(currentNode) !== false && $isElementNode(currentNode)) {\n      stack.push(currentNode.getChildren());\n    }\n  }\n}\n\nfunction $getTableAndElementByKey(tableNodeKey, editor = $getEditor()) {\n  const tableNode = $getNodeByKey(tableNodeKey);\n  if (!$isTableNode(tableNode)) {\n    formatDevErrorMessage(`TableObserver: Expected tableNodeKey ${tableNodeKey} to be a TableNode`);\n  }\n  const tableElement = getTableElement(tableNode, editor.getElementByKey(tableNodeKey));\n  if (!(tableElement !== null)) {\n    formatDevErrorMessage(`TableObserver: Expected to find TableElement in DOM for key ${tableNodeKey}`);\n  }\n  return {\n    tableElement,\n    tableNode\n  };\n}\nclass TableObserver {\n  constructor(editor, tableNodeKey) {\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.listenersToRemove = new Set();\n    this.tableNodeKey = tableNodeKey;\n    this.editor = editor;\n    this.table = {\n      columns: 0,\n      domRows: [],\n      rows: 0\n    };\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.isSelecting = false;\n    this.pointerType = null;\n    this.shouldCheckSelection = false;\n    this.abortController = new AbortController();\n    this.listenerOptions = {\n      signal: this.abortController.signal\n    };\n    this.nextFocus = null;\n    this.trackTable();\n  }\n  getTable() {\n    return this.table;\n  }\n  removeListeners() {\n    this.abortController.abort('removeListeners');\n    Array.from(this.listenersToRemove).forEach(removeListener => removeListener());\n    this.listenersToRemove.clear();\n  }\n  $lookup() {\n    return $getTableAndElementByKey(this.tableNodeKey, this.editor);\n  }\n  trackTable() {\n    const observer = new MutationObserver(records => {\n      this.editor.getEditorState().read(() => {\n        let gridNeedsRedraw = false;\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const target = record.target;\n          const nodeName = target.nodeName;\n          if (nodeName === 'TABLE' || nodeName === 'TBODY' || nodeName === 'THEAD' || nodeName === 'TR') {\n            gridNeedsRedraw = true;\n            break;\n          }\n        }\n        if (!gridNeedsRedraw) {\n          return;\n        }\n        const {\n          tableNode,\n          tableElement\n        } = this.$lookup();\n        this.table = getTable(tableNode, tableElement);\n      }, {\n        editor: this.editor\n      });\n    });\n    this.editor.getEditorState().read(() => {\n      const {\n        tableNode,\n        tableElement\n      } = this.$lookup();\n      this.table = getTable(tableNode, tableElement);\n      observer.observe(tableElement, {\n        attributes: true,\n        childList: true,\n        subtree: true\n      });\n    }, {\n      editor: this.editor\n    });\n  }\n  $clearHighlight() {\n    const editor = this.editor;\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.$enableHighlightStyle();\n    const {\n      tableNode,\n      tableElement\n    } = this.$lookup();\n    const grid = getTable(tableNode, tableElement);\n    $updateDOMForSelection(editor, grid, null);\n    if ($getSelection() !== null) {\n      $setSelection(null);\n      editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n    }\n  }\n  $enableHighlightStyle() {\n    const editor = this.editor;\n    const {\n      tableElement\n    } = this.$lookup();\n    removeClassNamesFromElement(tableElement, editor._config.theme.tableSelection);\n    tableElement.classList.remove('disable-selection');\n    this.hasHijackedSelectionStyles = false;\n  }\n  $disableHighlightStyle() {\n    const {\n      tableElement\n    } = this.$lookup();\n    addClassNamesToElement(tableElement, this.editor._config.theme.tableSelection);\n    this.hasHijackedSelectionStyles = true;\n  }\n  $updateTableTableSelection(selection) {\n    if (selection !== null) {\n      if (!(selection.tableKey === this.tableNodeKey)) {\n        formatDevErrorMessage(`TableObserver.$updateTableTableSelection: selection.tableKey !== this.tableNodeKey ('${selection.tableKey}' !== '${this.tableNodeKey}')`);\n      }\n      const editor = this.editor;\n      this.tableSelection = selection;\n      this.isHighlightingCells = true;\n      this.$disableHighlightStyle();\n      this.updateDOMSelection();\n      $updateDOMForSelection(editor, this.table, this.tableSelection);\n    } else {\n      this.$clearHighlight();\n    }\n  }\n\n  /**\n   * @internal\n   * Firefox has a strange behavior where pressing the down arrow key from\n   * above the table will move the caret after the table and then lexical\n   * will select the last cell instead of the first.\n   * We do still want to let the browser handle caret movement but we will\n   * use this property to \"tag\" the update so that we can recheck the\n   * selection after the event is processed.\n   */\n  setShouldCheckSelection() {\n    this.shouldCheckSelection = true;\n  }\n  /**\n   * @internal\n   */\n  getAndClearShouldCheckSelection() {\n    if (this.shouldCheckSelection) {\n      this.shouldCheckSelection = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   * When handling mousemove events we track what the focus cell should be, but\n   * the DOM selection may end up somewhere else entirely. We don't have an elegant\n   * way to handle this after the DOM selection has been resolved in a\n   * SELECTION_CHANGE_COMMAND callback.\n   */\n  setNextFocus(nextFocus) {\n    this.nextFocus = nextFocus;\n  }\n\n  /** @internal */\n  getAndClearNextFocus() {\n    const {\n      nextFocus\n    } = this;\n    if (nextFocus !== null) {\n      this.nextFocus = null;\n    }\n    return nextFocus;\n  }\n\n  /** @internal */\n  updateDOMSelection() {\n    if (this.anchorCell !== null && this.focusCell !== null) {\n      const domSelection = getDOMSelection(this.editor._window);\n      // We are not using a native selection for tables, and if we\n      // set one then the reconciler will undo it.\n      // TODO - it would make sense to have one so that native\n      //        copy/paste worked. Right now we have to emulate with\n      //        keyboard events but it won't fire if triggered from the menu\n      if (domSelection && domSelection.rangeCount > 0) {\n        domSelection.removeAllRanges();\n      }\n    }\n  }\n  $setFocusCellForSelection(cell, ignoreStart = false) {\n    const editor = this.editor;\n    const {\n      tableNode\n    } = this.$lookup();\n    const cellX = cell.x;\n    const cellY = cell.y;\n    this.focusCell = cell;\n    if (!this.isHighlightingCells && (this.anchorX !== cellX || this.anchorY !== cellY || ignoreStart)) {\n      this.isHighlightingCells = true;\n      this.$disableHighlightStyle();\n    } else if (cellX === this.focusX && cellY === this.focusY) {\n      return false;\n    }\n    this.focusX = cellX;\n    this.focusY = cellY;\n    if (this.isHighlightingCells) {\n      const focusTableCellNode = $getNearestTableCellInTableFromDOMNode(tableNode, cell.elem);\n      if (this.tableSelection != null && this.anchorCellNodeKey != null && focusTableCellNode !== null) {\n        this.focusCellNodeKey = focusTableCellNode.getKey();\n        this.tableSelection = $createTableSelectionFrom(tableNode, this.$getAnchorTableCellOrThrow(), focusTableCellNode);\n        $setSelection(this.tableSelection);\n        editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        $updateDOMForSelection(editor, this.table, this.tableSelection);\n        return true;\n      }\n    }\n    return false;\n  }\n  $getAnchorTableCell() {\n    return this.anchorCellNodeKey ? $getNodeByKey(this.anchorCellNodeKey) : null;\n  }\n  $getAnchorTableCellOrThrow() {\n    const anchorTableCell = this.$getAnchorTableCell();\n    if (!(anchorTableCell !== null)) {\n      formatDevErrorMessage(`TableObserver anchorTableCell is null`);\n    }\n    return anchorTableCell;\n  }\n  $getFocusTableCell() {\n    return this.focusCellNodeKey ? $getNodeByKey(this.focusCellNodeKey) : null;\n  }\n  $getFocusTableCellOrThrow() {\n    const focusTableCell = this.$getFocusTableCell();\n    if (!(focusTableCell !== null)) {\n      formatDevErrorMessage(`TableObserver focusTableCell is null`);\n    }\n    return focusTableCell;\n  }\n  $setAnchorCellForSelection(cell) {\n    this.isHighlightingCells = false;\n    this.anchorCell = cell;\n    this.anchorX = cell.x;\n    this.anchorY = cell.y;\n    const {\n      tableNode\n    } = this.$lookup();\n    const anchorTableCellNode = $getNearestTableCellInTableFromDOMNode(tableNode, cell.elem);\n    if (anchorTableCellNode !== null) {\n      const anchorNodeKey = anchorTableCellNode.getKey();\n      this.tableSelection = this.tableSelection != null ? this.tableSelection.clone() : $createTableSelection();\n      this.anchorCellNodeKey = anchorNodeKey;\n    }\n  }\n  $formatCells(type) {\n    const selection = $getSelection();\n    if (!$isTableSelection(selection)) {\n      formatDevErrorMessage(`Expected Table selection`);\n    }\n    const formatSelection = $createRangeSelection();\n    const anchor = formatSelection.anchor;\n    const focus = formatSelection.focus;\n    const cellNodes = selection.getNodes().filter($isTableCellNode);\n    if (!(cellNodes.length > 0)) {\n      formatDevErrorMessage(`No table cells present`);\n    }\n    const paragraph = cellNodes[0].getFirstChild();\n    const alignFormatWith = $isParagraphNode(paragraph) ? paragraph.getFormatFlags(type, null) : null;\n    cellNodes.forEach(cellNode => {\n      anchor.set(cellNode.getKey(), 0, 'element');\n      focus.set(cellNode.getKey(), cellNode.getChildrenSize(), 'element');\n      formatSelection.formatText(type, alignFormatWith);\n    });\n    $setSelection(selection);\n    this.editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  $clearText() {\n    const {\n      editor\n    } = this;\n    const tableNode = $getNodeByKey(this.tableNodeKey);\n    if (!$isTableNode(tableNode)) {\n      throw new Error('Expected TableNode.');\n    }\n    const selection = $getSelection();\n    if (!$isTableSelection(selection)) {\n      formatDevErrorMessage(`Expected TableSelection`);\n    }\n    const selectedNodes = selection.getNodes().filter($isTableCellNode);\n\n    // Check if the entire table is selected by verifying first and last cells\n    const firstRow = tableNode.getFirstChild();\n    const lastRow = tableNode.getLastChild();\n    const isEntireTableSelected = selectedNodes.length > 0 && firstRow !== null && lastRow !== null && $isTableRowNode(firstRow) && $isTableRowNode(lastRow) && selectedNodes[0] === firstRow.getFirstChild() && selectedNodes[selectedNodes.length - 1] === lastRow.getLastChild();\n    if (isEntireTableSelected) {\n      tableNode.selectPrevious();\n      const parent = tableNode.getParent();\n      // Delete entire table\n      tableNode.remove();\n      // Handle case when table was the only node\n      if ($isRootNode(parent) && parent.isEmpty()) {\n        editor.dispatchCommand(INSERT_PARAGRAPH_COMMAND, undefined);\n      }\n      return;\n    }\n    selectedNodes.forEach(cellNode => {\n      if ($isElementNode(cellNode)) {\n        const paragraphNode = $createParagraphNode();\n        const textNode = $createTextNode();\n        paragraphNode.append(textNode);\n        cellNode.append(paragraphNode);\n        cellNode.getChildren().forEach(child => {\n          if (child !== paragraphNode) {\n            child.remove();\n          }\n        });\n      }\n    });\n    $updateDOMForSelection(editor, this.table, null);\n    $setSelection(null);\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n}\n\nconst LEXICAL_ELEMENT_KEY = '__lexicalTableSelection';\nconst isPointerDownOnEvent = event => {\n  return (event.buttons & 1) === 1;\n};\nfunction isHTMLTableElement(el) {\n  return isHTMLElement(el) && el.nodeName === 'TABLE';\n}\nfunction getTableElement(tableNode, dom) {\n  if (!dom) {\n    return dom;\n  }\n  const element = isHTMLTableElement(dom) ? dom : tableNode.getDOMSlot(dom).element;\n  if (!(element.nodeName === 'TABLE')) {\n    formatDevErrorMessage(`getTableElement: Expecting table in as DOM node for TableNode, not ${dom.nodeName}`);\n  }\n  return element;\n}\nfunction getEditorWindow(editor) {\n  return editor._window;\n}\nfunction $findParentTableCellNodeInTable(tableNode, node) {\n  for (let currentNode = node, lastTableCellNode = null; currentNode !== null; currentNode = currentNode.getParent()) {\n    if (tableNode.is(currentNode)) {\n      return lastTableCellNode;\n    } else if ($isTableCellNode(currentNode)) {\n      lastTableCellNode = currentNode;\n    }\n  }\n  return null;\n}\nconst ARROW_KEY_COMMANDS_WITH_DIRECTION = [[KEY_ARROW_DOWN_COMMAND, 'down'], [KEY_ARROW_UP_COMMAND, 'up'], [KEY_ARROW_LEFT_COMMAND, 'backward'], [KEY_ARROW_RIGHT_COMMAND, 'forward']];\nconst DELETE_TEXT_COMMANDS = [DELETE_WORD_COMMAND, DELETE_LINE_COMMAND, DELETE_CHARACTER_COMMAND];\nconst DELETE_KEY_COMMANDS = [KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND];\nfunction applyTableHandlers(tableNode, element, editor, hasTabHandler) {\n  const rootElement = editor.getRootElement();\n  const editorWindow = getEditorWindow(editor);\n  if (!(rootElement !== null && editorWindow !== null)) {\n    formatDevErrorMessage(`applyTableHandlers: editor has no root element set`);\n  }\n  const tableObserver = new TableObserver(editor, tableNode.getKey());\n  const tableElement = getTableElement(tableNode, element);\n  attachTableObserverToTableElement(tableElement, tableObserver);\n  tableObserver.listenersToRemove.add(() => detachTableObserverFromTableElement(tableElement, tableObserver));\n  const createPointerHandlers = () => {\n    if (tableObserver.isSelecting) {\n      return;\n    }\n    const onPointerUp = () => {\n      tableObserver.isSelecting = false;\n      editorWindow.removeEventListener('pointerup', onPointerUp);\n      editorWindow.removeEventListener('pointermove', onPointerMove);\n    };\n    const onPointerMove = moveEvent => {\n      if (!isPointerDownOnEvent(moveEvent) && tableObserver.isSelecting) {\n        tableObserver.isSelecting = false;\n        editorWindow.removeEventListener('pointerup', onPointerUp);\n        editorWindow.removeEventListener('pointermove', onPointerMove);\n        return;\n      }\n      if (!isDOMNode(moveEvent.target)) {\n        return;\n      }\n      let focusCell = null;\n      // In firefox the moveEvent.target may be captured so we must always\n      // consult the coordinates #7245\n      const override = !(IS_FIREFOX || tableElement.contains(moveEvent.target));\n      if (override) {\n        focusCell = getDOMCellInTableFromTarget(tableElement, moveEvent.target);\n      } else {\n        for (const el of document.elementsFromPoint(moveEvent.clientX, moveEvent.clientY)) {\n          focusCell = getDOMCellInTableFromTarget(tableElement, el);\n          if (focusCell) {\n            break;\n          }\n        }\n      }\n      if (focusCell && (tableObserver.focusCell === null || focusCell.elem !== tableObserver.focusCell.elem)) {\n        tableObserver.setNextFocus({\n          focusCell,\n          override\n        });\n        editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n      }\n    };\n    tableObserver.isSelecting = true;\n    editorWindow.addEventListener('pointerup', onPointerUp, tableObserver.listenerOptions);\n    editorWindow.addEventListener('pointermove', onPointerMove, tableObserver.listenerOptions);\n  };\n  const onPointerDown = event => {\n    tableObserver.pointerType = event.pointerType;\n    if (event.button !== 0 || !isDOMNode(event.target) || !editorWindow) {\n      return;\n    }\n    const targetCell = getDOMCellFromTarget(event.target);\n    if (targetCell !== null) {\n      editor.update(() => {\n        const prevSelection = $getPreviousSelection();\n        // We can't trust Firefox to do the right thing with the selection and\n        // we don't have a proper state machine to do this \"correctly\" but\n        // if we go ahead and make the table selection now it will work\n        if (IS_FIREFOX && event.shiftKey && $isSelectionInTable(prevSelection, tableNode) && ($isRangeSelection(prevSelection) || $isTableSelection(prevSelection))) {\n          const prevAnchorNode = prevSelection.anchor.getNode();\n          const prevAnchorCell = $findParentTableCellNodeInTable(tableNode, prevSelection.anchor.getNode());\n          if (prevAnchorCell) {\n            tableObserver.$setAnchorCellForSelection($getObserverCellFromCellNodeOrThrow(tableObserver, prevAnchorCell));\n            tableObserver.$setFocusCellForSelection(targetCell);\n            stopEvent(event);\n          } else {\n            const newSelection = tableNode.isBefore(prevAnchorNode) ? tableNode.selectStart() : tableNode.selectEnd();\n            newSelection.anchor.set(prevSelection.anchor.key, prevSelection.anchor.offset, prevSelection.anchor.type);\n          }\n        } else {\n          tableObserver.$setAnchorCellForSelection(targetCell);\n        }\n      });\n    }\n    createPointerHandlers();\n  };\n  tableElement.addEventListener('pointerdown', onPointerDown, tableObserver.listenerOptions);\n  tableObserver.listenersToRemove.add(() => {\n    tableElement.removeEventListener('pointerdown', onPointerDown);\n  });\n  const onTripleClick = event => {\n    if (event.detail >= 3 && isDOMNode(event.target)) {\n      const targetCell = getDOMCellFromTarget(event.target);\n      if (targetCell !== null) {\n        event.preventDefault();\n      }\n    }\n  };\n  tableElement.addEventListener('mousedown', onTripleClick, tableObserver.listenerOptions);\n  tableObserver.listenersToRemove.add(() => {\n    tableElement.removeEventListener('mousedown', onTripleClick);\n  });\n\n  // Clear selection when clicking outside of dom.\n  const pointerDownCallback = event => {\n    const target = event.target;\n    if (event.button !== 0 || !isDOMNode(target)) {\n      return;\n    }\n    editor.update(() => {\n      const selection = $getSelection();\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey && rootElement.contains(target)) {\n        tableObserver.$clearHighlight();\n      }\n    });\n  };\n  editorWindow.addEventListener('pointerdown', pointerDownCallback, tableObserver.listenerOptions);\n  tableObserver.listenersToRemove.add(() => {\n    editorWindow.removeEventListener('pointerdown', pointerDownCallback);\n  });\n  for (const [command, direction] of ARROW_KEY_COMMANDS_WITH_DIRECTION) {\n    tableObserver.listenersToRemove.add(editor.registerCommand(command, event => $handleArrowKey(editor, event, direction, tableNode, tableObserver), COMMAND_PRIORITY_HIGH));\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(KEY_ESCAPE_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isTableSelection(selection)) {\n      const focusCellNode = $findParentTableCellNodeInTable(tableNode, selection.focus.getNode());\n      if (focusCellNode !== null) {\n        stopEvent(event);\n        focusCellNode.selectEnd();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_HIGH));\n  const deleteTextHandler = command => () => {\n    const selection = $getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.$clearText();\n      return true;\n    } else if ($isRangeSelection(selection)) {\n      const tableCellNode = $findParentTableCellNodeInTable(tableNode, selection.anchor.getNode());\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n      const anchorNode = selection.anchor.getNode();\n      const focusNode = selection.focus.getNode();\n      const isAnchorInside = tableNode.isParentOf(anchorNode);\n      const isFocusInside = tableNode.isParentOf(focusNode);\n      const selectionContainsPartialTable = isAnchorInside && !isFocusInside || isFocusInside && !isAnchorInside;\n      if (selectionContainsPartialTable) {\n        tableObserver.$clearText();\n        return true;\n      }\n      const nearestElementNode = $findMatchingParent(selection.anchor.getNode(), n => $isElementNode(n));\n      const topLevelCellElementNode = nearestElementNode && $findMatchingParent(nearestElementNode, n => $isElementNode(n) && $isTableCellNode(n.getParent()));\n      if (!$isElementNode(topLevelCellElementNode) || !$isElementNode(nearestElementNode)) {\n        return false;\n      }\n      if (command === DELETE_LINE_COMMAND && topLevelCellElementNode.getPreviousSibling() === null) {\n        // TODO: Fix Delete Line in Table Cells.\n        return true;\n      }\n    }\n    return false;\n  };\n  for (const command of DELETE_TEXT_COMMANDS) {\n    tableObserver.listenersToRemove.add(editor.registerCommand(command, deleteTextHandler(command), COMMAND_PRIORITY_CRITICAL));\n  }\n  const $deleteCellHandler = event => {\n    const selection = $getSelection();\n    if (!($isTableSelection(selection) || $isRangeSelection(selection))) {\n      return false;\n    }\n\n    // If the selection is inside the table but should remove the whole table\n    // we expand the selection so that both the anchor and focus are outside\n    // the table and the editor's command listener will handle the delete\n    const isAnchorInside = tableNode.isParentOf(selection.anchor.getNode());\n    const isFocusInside = tableNode.isParentOf(selection.focus.getNode());\n    if (isAnchorInside !== isFocusInside) {\n      const tablePoint = isAnchorInside ? 'anchor' : 'focus';\n      const outerPoint = isAnchorInside ? 'focus' : 'anchor';\n      // Preserve the outer point\n      const {\n        key,\n        offset,\n        type\n      } = selection[outerPoint];\n      // Expand the selection around the table\n      const newSelection = tableNode[selection[tablePoint].isBefore(selection[outerPoint]) ? 'selectPrevious' : 'selectNext']();\n      // Restore the outer point of the selection\n      newSelection[outerPoint].set(key, offset, type);\n      // Let the base implementation handle the rest\n      return false;\n    }\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n      tableObserver.$clearText();\n      return true;\n    }\n    return false;\n  };\n  for (const command of DELETE_KEY_COMMANDS) {\n    tableObserver.listenersToRemove.add(editor.registerCommand(command, $deleteCellHandler, COMMAND_PRIORITY_CRITICAL));\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(CUT_COMMAND, event => {\n    const selection = $getSelection();\n    if (selection) {\n      if (!($isTableSelection(selection) || $isRangeSelection(selection))) {\n        return false;\n      }\n      // Copying to the clipboard is async so we must capture the data\n      // before we delete it\n      void copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null, $getClipboardDataFromSelection(selection));\n      const intercepted = $deleteCellHandler(event);\n      if ($isRangeSelection(selection)) {\n        selection.removeText();\n        return true;\n      }\n      return intercepted;\n    }\n    return false;\n  }, COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(FORMAT_TEXT_COMMAND, payload => {\n    const selection = $getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.$formatCells(payload);\n      return true;\n    } else if ($isRangeSelection(selection)) {\n      const tableCellNode = $findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(FORMAT_ELEMENT_COMMAND, formatType => {\n    const selection = $getSelection();\n    if (!$isTableSelection(selection) || !$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    if (!$isTableCellNode(anchorNode) || !$isTableCellNode(focusNode)) {\n      return false;\n    }\n\n    // Align the table if the entire table is selected\n    if ($isFullTableSelection(selection, tableNode)) {\n      tableNode.setFormat(formatType);\n      return true;\n    }\n    const [tableMap, anchorCell, focusCell] = $computeTableMap(tableNode, anchorNode, focusNode);\n    const maxRow = Math.max(anchorCell.startRow + anchorCell.cell.__rowSpan - 1, focusCell.startRow + focusCell.cell.__rowSpan - 1);\n    const maxColumn = Math.max(anchorCell.startColumn + anchorCell.cell.__colSpan - 1, focusCell.startColumn + focusCell.cell.__colSpan - 1);\n    const minRow = Math.min(anchorCell.startRow, focusCell.startRow);\n    const minColumn = Math.min(anchorCell.startColumn, focusCell.startColumn);\n    const visited = new Set();\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minColumn; j <= maxColumn; j++) {\n        const cell = tableMap[i][j].cell;\n        if (visited.has(cell)) {\n          continue;\n        }\n        visited.add(cell);\n        cell.setFormat(formatType);\n        const cellChildren = cell.getChildren();\n        for (let k = 0; k < cellChildren.length; k++) {\n          const child = cellChildren[k];\n          if ($isElementNode(child) && !child.isInline()) {\n            child.setFormat(formatType);\n          }\n        }\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(CONTROLLED_TEXT_INSERTION_COMMAND, payload => {\n    const selection = $getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.$clearHighlight();\n      return false;\n    } else if ($isRangeSelection(selection)) {\n      const tableCellNode = $findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n      if (typeof payload === 'string') {\n        const edgePosition = $getTableEdgeCursorPosition(editor, selection, tableNode);\n        if (edgePosition) {\n          $insertParagraphAtTableEdge(edgePosition, tableNode, [$createTextNode(payload)]);\n          return true;\n        }\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_CRITICAL));\n  if (hasTabHandler) {\n    tableObserver.listenersToRemove.add(editor.registerCommand(KEY_TAB_COMMAND, event => {\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || !selection.isCollapsed() || !$isSelectionInTable(selection, tableNode)) {\n        return false;\n      }\n      const tableCellNode = $findCellNode(selection.anchor.getNode());\n      if (tableCellNode === null || !tableNode.is($findTableNode(tableCellNode))) {\n        return false;\n      }\n      stopEvent(event);\n      $selectAdjacentCell(tableCellNode, event.shiftKey ? 'previous' : 'next');\n      return true;\n    }, COMMAND_PRIORITY_CRITICAL));\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(FOCUS_COMMAND, payload => {\n    return tableNode.isSelected();\n  }, COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, selectionPayload => {\n    const {\n      nodes,\n      selection\n    } = selectionPayload;\n    const anchorAndFocus = selection.getStartEndPoints();\n    const isTableSelection = $isTableSelection(selection);\n    const isRangeSelection = $isRangeSelection(selection);\n    const isSelectionInsideOfGrid = isRangeSelection && $findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n)) !== null && $findMatchingParent(selection.focus.getNode(), n => $isTableCellNode(n)) !== null || isTableSelection;\n    if (nodes.length !== 1 || !$isTableNode(nodes[0]) || !isSelectionInsideOfGrid || anchorAndFocus === null) {\n      return false;\n    }\n    const [anchor, focus] = anchorAndFocus;\n    const [anchorCellNode, anchorRowNode, gridNode] = $getNodeTriplet(anchor);\n    const focusCellNode = $findMatchingParent(focus.getNode(), n => $isTableCellNode(n));\n    if (!$isTableCellNode(anchorCellNode) || !$isTableCellNode(focusCellNode) || !$isTableRowNode(anchorRowNode) || !$isTableNode(gridNode)) {\n      return false;\n    }\n    const templateGrid = nodes[0];\n    const [initialGridMap, anchorCellMap, focusCellMap] = $computeTableMap(gridNode, anchorCellNode, focusCellNode);\n    const [templateGridMap] = $computeTableMapSkipCellCheck(templateGrid, null, null);\n    const initialRowCount = initialGridMap.length;\n    const initialColCount = initialRowCount > 0 ? initialGridMap[0].length : 0;\n\n    // If we have a range selection, we'll fit the template grid into the\n    // table, growing the table if necessary.\n    let startRow = anchorCellMap.startRow;\n    let startCol = anchorCellMap.startColumn;\n    let affectedRowCount = templateGridMap.length;\n    let affectedColCount = affectedRowCount > 0 ? templateGridMap[0].length : 0;\n    if (isTableSelection) {\n      // If we have a table selection, we'll only modify the cells within\n      // the selection boundary.\n      const selectionBoundary = $computeTableCellRectBoundary(initialGridMap, anchorCellMap, focusCellMap);\n      const selectionRowCount = selectionBoundary.maxRow - selectionBoundary.minRow + 1;\n      const selectionColCount = selectionBoundary.maxColumn - selectionBoundary.minColumn + 1;\n      startRow = selectionBoundary.minRow;\n      startCol = selectionBoundary.minColumn;\n      affectedRowCount = Math.min(affectedRowCount, selectionRowCount);\n      affectedColCount = Math.min(affectedColCount, selectionColCount);\n    }\n\n    // Step 1: Unmerge all merged cells within the affected area\n    let didPerformMergeOperations = false;\n    const lastRowForUnmerge = Math.min(initialRowCount, startRow + affectedRowCount) - 1;\n    const lastColForUnmerge = Math.min(initialColCount, startCol + affectedColCount) - 1;\n    const unmergedKeys = new Set();\n    for (let row = startRow; row <= lastRowForUnmerge; row++) {\n      for (let col = startCol; col <= lastColForUnmerge; col++) {\n        const cellMap = initialGridMap[row][col];\n        if (unmergedKeys.has(cellMap.cell.getKey())) {\n          continue; // cell was a merged cell that was already handled\n        }\n        if (cellMap.cell.__rowSpan === 1 && cellMap.cell.__colSpan === 1) {\n          continue; // cell is not a merged cell\n        }\n        $unmergeCellNode(cellMap.cell);\n        unmergedKeys.add(cellMap.cell.getKey());\n        didPerformMergeOperations = true;\n      }\n    }\n    let [interimGridMap] = $computeTableMapSkipCellCheck(gridNode.getWritable(), null, null);\n\n    // Step 2: Expand current table (if needed)\n    const rowsToInsert = affectedRowCount - initialRowCount + startRow;\n    for (let i = 0; i < rowsToInsert; i++) {\n      const cellMap = interimGridMap[initialRowCount - 1][0];\n      $insertTableRowAtNode(cellMap.cell);\n    }\n    const colsToInsert = affectedColCount - initialColCount + startCol;\n    for (let i = 0; i < colsToInsert; i++) {\n      const cellMap = interimGridMap[0][initialColCount - 1];\n      $insertTableColumnAtNode(cellMap.cell, true, false);\n    }\n    [interimGridMap] = $computeTableMapSkipCellCheck(gridNode.getWritable(), null, null);\n\n    // Step 3: Merge cells and set cell content, to match template grid\n    for (let row = startRow; row < startRow + affectedRowCount; row++) {\n      for (let col = startCol; col < startCol + affectedColCount; col++) {\n        const templateRow = row - startRow;\n        const templateCol = col - startCol;\n        const templateCellMap = templateGridMap[templateRow][templateCol];\n        if (templateCellMap.startRow !== templateRow || templateCellMap.startColumn !== templateCol) {\n          continue; // cell is a merged cell that was already handled\n        }\n        const templateCell = templateCellMap.cell;\n        if (templateCell.__rowSpan !== 1 || templateCell.__colSpan !== 1) {\n          const cellsToMerge = [];\n          const lastRowForMerge = Math.min(row + templateCell.__rowSpan, startRow + affectedRowCount) - 1;\n          const lastColForMerge = Math.min(col + templateCell.__colSpan, startCol + affectedColCount) - 1;\n          for (let r = row; r <= lastRowForMerge; r++) {\n            for (let c = col; c <= lastColForMerge; c++) {\n              const cellMap = interimGridMap[r][c];\n              cellsToMerge.push(cellMap.cell);\n            }\n          }\n          $mergeCells(cellsToMerge);\n          didPerformMergeOperations = true;\n        }\n        const {\n          cell\n        } = interimGridMap[row][col];\n        const originalChildren = cell.getChildren();\n        templateCell.getChildren().forEach(child => {\n          if ($isTextNode(child)) {\n            const paragraphNode = $createParagraphNode();\n            paragraphNode.append(child);\n            cell.append(child);\n          } else {\n            cell.append(child);\n          }\n        });\n        originalChildren.forEach(n => n.remove());\n      }\n    }\n    if (isTableSelection && didPerformMergeOperations) {\n      // reset the table selection in case the anchor or focus cell was\n      // removed via merge operations\n      const [finalGridMap] = $computeTableMapSkipCellCheck(gridNode.getWritable(), null, null);\n      const newAnchorCellMap = finalGridMap[anchorCellMap.startRow][anchorCellMap.startColumn];\n      newAnchorCellMap.cell.selectEnd();\n    }\n    return true;\n  }, COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(SELECTION_CHANGE_COMMAND, () => {\n    const selection = $getSelection();\n    const prevSelection = $getPreviousSelection();\n    const nextFocus = tableObserver.getAndClearNextFocus();\n    if (nextFocus !== null) {\n      const {\n        focusCell\n      } = nextFocus;\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey) {\n        if (focusCell.x === tableObserver.focusX && focusCell.y === tableObserver.focusY) {\n          // The selection is already the correct table selection\n          return false;\n        } else {\n          tableObserver.$setFocusCellForSelection(focusCell);\n          return true;\n        }\n      } else if (focusCell !== tableObserver.anchorCell && $isSelectionInTable(selection, tableNode)) {\n        // The selection has crossed cells\n        tableObserver.$setFocusCellForSelection(focusCell);\n        return true;\n      }\n    }\n    const shouldCheckSelection = tableObserver.getAndClearShouldCheckSelection();\n    // If they pressed the down arrow with the selection outside of the\n    // table, and then the selection ends up in the table but not in the\n    // first cell, then move the selection to the first cell.\n    if (shouldCheckSelection && $isRangeSelection(prevSelection) && $isRangeSelection(selection) && selection.isCollapsed()) {\n      const anchor = selection.anchor.getNode();\n      const firstRow = tableNode.getFirstChild();\n      const anchorCell = $findCellNode(anchor);\n      if (anchorCell !== null && $isTableRowNode(firstRow)) {\n        const firstCell = firstRow.getFirstChild();\n        if ($isTableCellNode(firstCell) && tableNode.is($findMatchingParent(anchorCell, node => node.is(tableNode) || node.is(firstCell)))) {\n          // The selection moved to the table, but not in the first cell\n          firstCell.selectStart();\n          return true;\n        }\n      }\n    }\n    if ($isRangeSelection(selection)) {\n      const {\n        anchor,\n        focus\n      } = selection;\n      const anchorNode = anchor.getNode();\n      const focusNode = focus.getNode();\n      // Using explicit comparison with table node to ensure it's not a nested table\n      // as in that case we'll leave selection resolving to that table\n      const anchorCellNode = $findCellNode(anchorNode);\n      const focusCellNode = $findCellNode(focusNode);\n      const isAnchorInside = !!(anchorCellNode && tableNode.is($findTableNode(anchorCellNode)));\n      const isFocusInside = !!(focusCellNode && tableNode.is($findTableNode(focusCellNode)));\n      const isPartiallyWithinTable = isAnchorInside !== isFocusInside;\n      const isWithinTable = isAnchorInside && isFocusInside;\n      const isBackward = selection.isBackward();\n      if (isPartiallyWithinTable) {\n        const newSelection = selection.clone();\n        if (isFocusInside) {\n          const [tableMap] = $computeTableMap(tableNode, focusCellNode, focusCellNode);\n          const firstCell = tableMap[0][0].cell;\n          const lastCell = tableMap[tableMap.length - 1].at(-1).cell;\n          newSelection.focus.set(isBackward ? firstCell.getKey() : lastCell.getKey(), isBackward ? firstCell.getChildrenSize() : lastCell.getChildrenSize(), 'element');\n        } else if (isAnchorInside) {\n          const [tableMap] = $computeTableMap(tableNode, anchorCellNode, anchorCellNode);\n          const firstCell = tableMap[0][0].cell;\n          const lastCell = tableMap[tableMap.length - 1].at(-1).cell;\n          /**\n           * If isBackward, set the anchor to be at the end of the table so that when the cursor moves outside of\n           * the table in the backward direction, the entire table will be selected from its end.\n           * Otherwise, if forward, set the anchor to be at the start of the table so that when the focus is dragged\n           * outside th end of the table, it will start from the beginning of the table.\n           */\n          newSelection.anchor.set(isBackward ? lastCell.getKey() : firstCell.getKey(), isBackward ? lastCell.getChildrenSize() : 0, 'element');\n        }\n        $setSelection(newSelection);\n        $addHighlightStyleToTable(editor, tableObserver);\n      } else if (isWithinTable) {\n        // Handle case when selection spans across multiple cells but still\n        // has range selection, then we convert it into table selection\n        if (!anchorCellNode.is(focusCellNode)) {\n          tableObserver.$setAnchorCellForSelection($getObserverCellFromCellNodeOrThrow(tableObserver, anchorCellNode));\n          tableObserver.$setFocusCellForSelection($getObserverCellFromCellNodeOrThrow(tableObserver, focusCellNode), true);\n        }\n\n        // Handle case when the pointer type is touch and the current and\n        // previous selection are collapsed, and the previous anchor and current\n        // focus cell nodes are different, then we convert it into table selection\n        if (tableObserver.pointerType === 'touch' && selection.isCollapsed() && $isRangeSelection(prevSelection) && prevSelection.isCollapsed()) {\n          const prevAnchorCellNode = $findCellNode(prevSelection.anchor.getNode());\n          if (prevAnchorCellNode && !prevAnchorCellNode.is(focusCellNode)) {\n            tableObserver.$setAnchorCellForSelection($getObserverCellFromCellNodeOrThrow(tableObserver, prevAnchorCellNode));\n            tableObserver.$setFocusCellForSelection($getObserverCellFromCellNodeOrThrow(tableObserver, focusCellNode), true);\n            tableObserver.pointerType = null;\n          }\n        }\n      }\n    } else if (selection && $isTableSelection(selection) && selection.is(prevSelection) && selection.tableKey === tableNode.getKey()) {\n      // if selection goes outside of the table we need to change it to Range selection\n      const domSelection = getDOMSelection(editorWindow);\n      if (domSelection && domSelection.anchorNode && domSelection.focusNode) {\n        const focusNode = $getNearestNodeFromDOMNode(domSelection.focusNode);\n        const isFocusOutside = focusNode && !tableNode.isParentOf(focusNode);\n        const anchorNode = $getNearestNodeFromDOMNode(domSelection.anchorNode);\n        const isAnchorInside = anchorNode && tableNode.isParentOf(anchorNode);\n        if (isFocusOutside && isAnchorInside && domSelection.rangeCount > 0) {\n          const newSelection = $createRangeSelectionFromDom(domSelection, editor);\n          if (newSelection) {\n            newSelection.anchor.set(tableNode.getKey(), selection.isBackward() ? tableNode.getChildrenSize() : 0, 'element');\n            domSelection.removeAllRanges();\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    if (selection && !selection.is(prevSelection) && ($isTableSelection(selection) || $isTableSelection(prevSelection)) && tableObserver.tableSelection && !tableObserver.tableSelection.is(prevSelection)) {\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.$updateTableTableSelection(selection);\n      } else if (!$isTableSelection(selection) && $isTableSelection(prevSelection) && prevSelection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.$updateTableTableSelection(null);\n      }\n      return false;\n    }\n    if (tableObserver.hasHijackedSelectionStyles && !tableNode.isSelected()) {\n      $removeHighlightStyleToTable(editor, tableObserver);\n    } else if (!tableObserver.hasHijackedSelectionStyles && tableNode.isSelected()) {\n      $addHighlightStyleToTable(editor, tableObserver);\n    }\n    return false;\n  }, COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection) || !selection.isCollapsed() || !$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    const edgePosition = $getTableEdgeCursorPosition(editor, selection, tableNode);\n    if (edgePosition) {\n      $insertParagraphAtTableEdge(edgePosition, tableNode);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_CRITICAL));\n  return tableObserver;\n}\nfunction detachTableObserverFromTableElement(tableElement, tableObserver) {\n  if (getTableObserverFromTableElement(tableElement) === tableObserver) {\n    delete tableElement[LEXICAL_ELEMENT_KEY];\n  }\n}\nfunction attachTableObserverToTableElement(tableElement, tableObserver) {\n  if (!(getTableObserverFromTableElement(tableElement) === null)) {\n    formatDevErrorMessage(`tableElement already has an attached TableObserver`);\n  }\n  tableElement[LEXICAL_ELEMENT_KEY] = tableObserver;\n}\nfunction getTableObserverFromTableElement(tableElement) {\n  return tableElement[LEXICAL_ELEMENT_KEY] || null;\n}\nfunction getDOMCellFromTarget(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    const nodeName = currentNode.nodeName;\n    if (nodeName === 'TD' || nodeName === 'TH') {\n      // @ts-expect-error: internal field\n      const cell = currentNode._cell;\n      if (cell === undefined) {\n        return null;\n      }\n      return cell;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  return null;\n}\nfunction getDOMCellInTableFromTarget(table, node) {\n  if (!table.contains(node)) {\n    return null;\n  }\n  let cell = null;\n  for (let currentNode = node; currentNode != null; currentNode = currentNode.parentNode) {\n    if (currentNode === table) {\n      return cell;\n    }\n    const nodeName = currentNode.nodeName;\n    if (nodeName === 'TD' || nodeName === 'TH') {\n      // @ts-expect-error: internal field\n      cell = currentNode._cell || null;\n    }\n  }\n  return null;\n}\nfunction getTable(tableNode, dom) {\n  const tableElement = getTableElement(tableNode, dom);\n  const domRows = [];\n  const grid = {\n    columns: 0,\n    domRows,\n    rows: 0\n  };\n  let currentNode = tableElement.querySelector('tr');\n  let x = 0;\n  let y = 0;\n  domRows.length = 0;\n  while (currentNode != null) {\n    const nodeMame = currentNode.nodeName;\n    if (nodeMame === 'TD' || nodeMame === 'TH') {\n      const elem = currentNode;\n      const cell = {\n        elem,\n        hasBackgroundColor: elem.style.backgroundColor !== '',\n        highlighted: false,\n        x,\n        y\n      };\n\n      // @ts-expect-error: internal field\n      currentNode._cell = cell;\n      let row = domRows[y];\n      if (row === undefined) {\n        row = domRows[y] = [];\n      }\n      row[x] = cell;\n    } else {\n      const child = currentNode.firstChild;\n      if (child != null) {\n        currentNode = child;\n        continue;\n      }\n    }\n    const sibling = currentNode.nextSibling;\n    if (sibling != null) {\n      x++;\n      currentNode = sibling;\n      continue;\n    }\n    const parent = currentNode.parentNode;\n    if (parent != null) {\n      const parentSibling = parent.nextSibling;\n      if (parentSibling == null) {\n        break;\n      }\n      y++;\n      x = 0;\n      currentNode = parentSibling;\n    }\n  }\n  grid.columns = x + 1;\n  grid.rows = y + 1;\n  return grid;\n}\nfunction $updateDOMForSelection(editor, table, selection) {\n  const selectedCellNodes = new Set(selection ? selection.getNodes() : []);\n  $forEachTableCell(table, (cell, lexicalNode) => {\n    const elem = cell.elem;\n    if (selectedCellNodes.has(lexicalNode)) {\n      cell.highlighted = true;\n      $addHighlightToDOM(editor, cell);\n    } else {\n      cell.highlighted = false;\n      $removeHighlightFromDOM(editor, cell);\n      if (!elem.getAttribute('style')) {\n        elem.removeAttribute('style');\n      }\n    }\n  });\n}\nfunction $forEachTableCell(grid, cb) {\n  const {\n    domRows\n  } = grid;\n  for (let y = 0; y < domRows.length; y++) {\n    const row = domRows[y];\n    if (!row) {\n      continue;\n    }\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (!cell) {\n        continue;\n      }\n      const lexicalNode = $getNearestNodeFromDOMNode(cell.elem);\n      if (lexicalNode !== null) {\n        cb(cell, lexicalNode, {\n          x,\n          y\n        });\n      }\n    }\n  }\n}\nfunction $addHighlightStyleToTable(editor, tableSelection) {\n  tableSelection.$disableHighlightStyle();\n  $forEachTableCell(tableSelection.table, cell => {\n    cell.highlighted = true;\n    $addHighlightToDOM(editor, cell);\n  });\n}\nfunction $removeHighlightStyleToTable(editor, tableObserver) {\n  tableObserver.$enableHighlightStyle();\n  $forEachTableCell(tableObserver.table, cell => {\n    const elem = cell.elem;\n    cell.highlighted = false;\n    $removeHighlightFromDOM(editor, cell);\n    if (!elem.getAttribute('style')) {\n      elem.removeAttribute('style');\n    }\n  });\n}\nfunction $selectAdjacentCell(tableCellNode, direction) {\n  const siblingMethod = direction === 'next' ? 'getNextSibling' : 'getPreviousSibling';\n  const childMethod = direction === 'next' ? 'getFirstChild' : 'getLastChild';\n  const sibling = tableCellNode[siblingMethod]();\n  if ($isElementNode(sibling)) {\n    return sibling.selectEnd();\n  }\n  const parentRow = $findMatchingParent(tableCellNode, $isTableRowNode);\n  if (!(parentRow !== null)) {\n    formatDevErrorMessage(`selectAdjacentCell: Cell not in table row`);\n  }\n  for (let nextRow = parentRow[siblingMethod](); $isTableRowNode(nextRow); nextRow = nextRow[siblingMethod]()) {\n    const child = nextRow[childMethod]();\n    if ($isElementNode(child)) {\n      return child.selectEnd();\n    }\n  }\n  const parentTable = $findMatchingParent(parentRow, $isTableNode);\n  if (!(parentTable !== null)) {\n    formatDevErrorMessage(`selectAdjacentCell: Row not in table`);\n  }\n  return direction === 'next' ? parentTable.selectNext() : parentTable.selectPrevious();\n}\nconst selectTableNodeInDirection = (tableObserver, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableObserver.table.columns - 1 : 0)) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableObserver.table), isForward);\n      } else {\n        if (y !== (isForward ? tableObserver.table.rows - 1 : 0)) {\n          selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(isForward ? 0 : tableObserver.table.columns - 1, y + (isForward ? 1 : -1), tableObserver.table), isForward);\n        } else if (!isForward) {\n          tableNode.selectPrevious();\n        } else {\n          tableNode.selectNext();\n        }\n      }\n      return true;\n    case 'up':\n      if (y !== 0) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y - 1, tableObserver.table), false);\n      } else {\n        tableNode.selectPrevious();\n      }\n      return true;\n    case 'down':\n      if (y !== tableObserver.table.rows - 1) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y + 1, tableObserver.table), true);\n      } else {\n        tableNode.selectNext();\n      }\n      return true;\n    default:\n      return false;\n  }\n};\nfunction getCorner(rect, cellValue) {\n  let colName;\n  let rowName;\n  if (cellValue.startColumn === rect.minColumn) {\n    colName = 'minColumn';\n  } else if (cellValue.startColumn + cellValue.cell.__colSpan - 1 === rect.maxColumn) {\n    colName = 'maxColumn';\n  } else {\n    return null;\n  }\n  if (cellValue.startRow === rect.minRow) {\n    rowName = 'minRow';\n  } else if (cellValue.startRow + cellValue.cell.__rowSpan - 1 === rect.maxRow) {\n    rowName = 'maxRow';\n  } else {\n    return null;\n  }\n  return [colName, rowName];\n}\nfunction getCornerOrThrow(rect, cellValue) {\n  const corner = getCorner(rect, cellValue);\n  if (!(corner !== null)) {\n    formatDevErrorMessage(`getCornerOrThrow: cell ${cellValue.cell.getKey()} is not at a corner of rect`);\n  }\n  return corner;\n}\nfunction oppositeCorner([colName, rowName]) {\n  return [colName === 'minColumn' ? 'maxColumn' : 'minColumn', rowName === 'minRow' ? 'maxRow' : 'minRow'];\n}\nfunction cellAtCornerOrThrow(tableMap, rect, [colName, rowName]) {\n  const rowNum = rect[rowName];\n  const rowMap = tableMap[rowNum];\n  if (!(rowMap !== undefined)) {\n    formatDevErrorMessage(`cellAtCornerOrThrow: ${rowName} = ${String(rowNum)} missing in tableMap`);\n  }\n  const colNum = rect[colName];\n  const cell = rowMap[colNum];\n  if (!(cell !== undefined)) {\n    formatDevErrorMessage(`cellAtCornerOrThrow: ${colName} = ${String(colNum)} missing in tableMap`);\n  }\n  return cell;\n}\nfunction $extractRectCorners(tableMap, anchorCellValue, newFocusCellValue) {\n  // We are sure that the focus now either contracts or expands the rect\n  // but both the anchor and focus might be moved to ensure a rectangle\n  // given a potentially ragged merge shape\n  const rect = $computeTableCellRectBoundary(tableMap, anchorCellValue, newFocusCellValue);\n  const anchorCorner = getCorner(rect, anchorCellValue);\n  if (anchorCorner) {\n    return [cellAtCornerOrThrow(tableMap, rect, anchorCorner), cellAtCornerOrThrow(tableMap, rect, oppositeCorner(anchorCorner))];\n  }\n  const newFocusCorner = getCorner(rect, newFocusCellValue);\n  if (newFocusCorner) {\n    return [cellAtCornerOrThrow(tableMap, rect, oppositeCorner(newFocusCorner)), cellAtCornerOrThrow(tableMap, rect, newFocusCorner)];\n  }\n  // TODO this doesn't have to be arbitrary, use the closest corner instead\n  const newAnchorCorner = ['minColumn', 'minRow'];\n  return [cellAtCornerOrThrow(tableMap, rect, newAnchorCorner), cellAtCornerOrThrow(tableMap, rect, oppositeCorner(newAnchorCorner))];\n}\nfunction $adjustFocusInDirection(tableObserver, tableMap, anchorCellValue, focusCellValue, direction) {\n  const rect = $computeTableCellRectBoundary(tableMap, anchorCellValue, focusCellValue);\n  const spans = $computeTableCellRectSpans(tableMap, rect);\n  const {\n    topSpan,\n    leftSpan,\n    bottomSpan,\n    rightSpan\n  } = spans;\n  const anchorCorner = getCornerOrThrow(rect, anchorCellValue);\n  const [focusColumn, focusRow] = oppositeCorner(anchorCorner);\n  let fCol = rect[focusColumn];\n  let fRow = rect[focusRow];\n  if (direction === 'forward') {\n    fCol += focusColumn === 'maxColumn' ? 1 : leftSpan;\n  } else if (direction === 'backward') {\n    fCol -= focusColumn === 'minColumn' ? 1 : rightSpan;\n  } else if (direction === 'down') {\n    fRow += focusRow === 'maxRow' ? 1 : topSpan;\n  } else if (direction === 'up') {\n    fRow -= focusRow === 'minRow' ? 1 : bottomSpan;\n  }\n  const targetRowMap = tableMap[fRow];\n  if (targetRowMap === undefined) {\n    return false;\n  }\n  const newFocusCellValue = targetRowMap[fCol];\n  if (newFocusCellValue === undefined) {\n    return false;\n  }\n  // We can be certain that anchorCellValue and newFocusCellValue are\n  // contained within the desired selection, but we are not certain if\n  // they need to be expanded or not to maintain a rectangular shape\n  const [finalAnchorCell, finalFocusCell] = $extractRectCorners(tableMap, anchorCellValue, newFocusCellValue);\n  const anchorDOM = $getObserverCellFromCellNodeOrThrow(tableObserver, finalAnchorCell.cell);\n  const focusDOM = $getObserverCellFromCellNodeOrThrow(tableObserver, finalFocusCell.cell);\n  tableObserver.$setAnchorCellForSelection(anchorDOM);\n  tableObserver.$setFocusCellForSelection(focusDOM, true);\n  return true;\n}\nfunction $isSelectionInTable(selection, tableNode) {\n  if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n    // TODO this should probably return false if there's an unrelated\n    //      shadow root between the node and the table (e.g. another table,\n    //      collapsible, etc.)\n    const isAnchorInside = tableNode.isParentOf(selection.anchor.getNode());\n    const isFocusInside = tableNode.isParentOf(selection.focus.getNode());\n    return isAnchorInside && isFocusInside;\n  }\n  return false;\n}\nfunction $isFullTableSelection(selection, tableNode) {\n  if ($isTableSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    if (tableNode && anchorNode && focusNode) {\n      const [map] = $computeTableMap(tableNode, anchorNode, focusNode);\n      return anchorNode.getKey() === map[0][0].cell.getKey() && focusNode.getKey() === map[map.length - 1].at(-1).cell.getKey();\n    }\n  }\n  return false;\n}\nfunction selectTableCellNode(tableCell, fromStart) {\n  if (fromStart) {\n    tableCell.selectStart();\n  } else {\n    tableCell.selectEnd();\n  }\n}\nfunction $addHighlightToDOM(editor, cell) {\n  const element = cell.elem;\n  const editorThemeClasses = editor._config.theme;\n  const node = $getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    formatDevErrorMessage(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  addClassNamesToElement(element, editorThemeClasses.tableCellSelected);\n}\nfunction $removeHighlightFromDOM(editor, cell) {\n  const element = cell.elem;\n  const node = $getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    formatDevErrorMessage(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  const editorThemeClasses = editor._config.theme;\n  removeClassNamesFromElement(element, editorThemeClasses.tableCellSelected);\n}\nfunction $findCellNode(node) {\n  const cellNode = $findMatchingParent(node, $isTableCellNode);\n  return $isTableCellNode(cellNode) ? cellNode : null;\n}\nfunction $findTableNode(node) {\n  const tableNode = $findMatchingParent(node, $isTableNode);\n  return $isTableNode(tableNode) ? tableNode : null;\n}\nfunction $getBlockParentIfFirstNode(node) {\n  for (let prevNode = node, currentNode = node; currentNode !== null; prevNode = currentNode, currentNode = currentNode.getParent()) {\n    if ($isElementNode(currentNode)) {\n      if (currentNode !== prevNode && currentNode.getFirstChild() !== prevNode) {\n        // Not the first child or the initial node\n        return null;\n      } else if (!currentNode.isInline()) {\n        return currentNode;\n      }\n    }\n  }\n  return null;\n}\nfunction $handleHorizontalArrowKeyRangeSelection(editor, event, selection, alter, isBackward, tableNode, tableObserver) {\n  const initialFocus = $caretFromPoint(selection.focus, isBackward ? 'previous' : 'next');\n  if ($isExtendableTextPointCaret(initialFocus)) {\n    return false;\n  }\n  let lastCaret = initialFocus;\n  // TableCellNode is the only shadow root we are interested in piercing so\n  // we find the last internal caret and then check its parent\n  for (const nextCaret of $extendCaretToRange(initialFocus).iterNodeCarets('shadowRoot')) {\n    if (!($isSiblingCaret(nextCaret) && $isElementNode(nextCaret.origin))) {\n      return false;\n    }\n    lastCaret = nextCaret;\n  }\n  const lastCaretParent = lastCaret.getParentAtCaret();\n  if (!$isTableCellNode(lastCaretParent)) {\n    return false;\n  }\n  const anchorCell = lastCaretParent;\n  const focusCaret = $findNextTableCell($getSiblingCaret(anchorCell, lastCaret.direction));\n  const anchorCellTable = $findMatchingParent(anchorCell, $isTableNode);\n  if (!(anchorCellTable && anchorCellTable.is(tableNode))) {\n    return false;\n  }\n  const anchorCellDOM = editor.getElementByKey(anchorCell.getKey());\n  const anchorDOMCell = getDOMCellFromTarget(anchorCellDOM);\n  if (!anchorCellDOM || !anchorDOMCell) {\n    return false;\n  }\n  const anchorCellTableElement = $getElementForTableNode(editor, anchorCellTable);\n  tableObserver.table = anchorCellTableElement;\n  if (!focusCaret) {\n    if (alter === 'extend') {\n      // extend the selection from a range inside the cell to a table selection of the cell\n      tableObserver.$setAnchorCellForSelection(anchorDOMCell);\n      tableObserver.$setFocusCellForSelection(anchorDOMCell, true);\n    } else {\n      // exit the table\n      const outerFocusCaret = $getTableExitCaret($getSiblingCaret(anchorCellTable, initialFocus.direction));\n      $setPointFromCaret(selection.anchor, outerFocusCaret);\n      $setPointFromCaret(selection.focus, outerFocusCaret);\n    }\n  } else if (alter === 'extend') {\n    const focusDOMCell = getDOMCellFromTarget(editor.getElementByKey(focusCaret.origin.getKey()));\n    if (!focusDOMCell) {\n      return false;\n    }\n    tableObserver.$setAnchorCellForSelection(anchorDOMCell);\n    tableObserver.$setFocusCellForSelection(focusDOMCell, true);\n  } else {\n    // alter === 'move'\n    const innerFocusCaret = $normalizeCaret(focusCaret);\n    $setPointFromCaret(selection.anchor, innerFocusCaret);\n    $setPointFromCaret(selection.focus, innerFocusCaret);\n  }\n  stopEvent(event);\n  return true;\n}\nfunction $getTableExitCaret(initialCaret) {\n  const adjacent = $getAdjacentChildCaret(initialCaret);\n  return $isChildCaret(adjacent) ? $normalizeCaret(adjacent) : initialCaret;\n}\nfunction $findNextTableCell(initialCaret) {\n  for (const nextCaret of $extendCaretToRange(initialCaret).iterNodeCarets('root')) {\n    const {\n      origin\n    } = nextCaret;\n    if ($isTableCellNode(origin)) {\n      // not sure why ts isn't narrowing here (even if the guard is on nextCaret.origin)\n      // but returning a new caret is fine\n      if ($isChildCaret(nextCaret)) {\n        return $getChildCaret(origin, initialCaret.direction);\n      }\n    } else if (!$isTableRowNode(origin)) {\n      break;\n    }\n  }\n  return null;\n}\nfunction $handleArrowKey(editor, event, direction, tableNode, tableObserver) {\n  if ((direction === 'up' || direction === 'down') && isTypeaheadMenuInView(editor)) {\n    return false;\n  }\n  const selection = $getSelection();\n  if (!$isSelectionInTable(selection, tableNode)) {\n    if ($isRangeSelection(selection)) {\n      if (direction === 'backward') {\n        if (selection.focus.offset > 0) {\n          return false;\n        }\n        const parentNode = $getBlockParentIfFirstNode(selection.focus.getNode());\n        if (!parentNode) {\n          return false;\n        }\n        const siblingNode = parentNode.getPreviousSibling();\n        if (!$isTableNode(siblingNode)) {\n          return false;\n        }\n        stopEvent(event);\n        if (event.shiftKey) {\n          selection.focus.set(siblingNode.getParentOrThrow().getKey(), siblingNode.getIndexWithinParent(), 'element');\n        } else {\n          siblingNode.selectEnd();\n        }\n        return true;\n      } else if (event.shiftKey && (direction === 'up' || direction === 'down')) {\n        const focusNode = selection.focus.getNode();\n        const isTableUnselect = !selection.isCollapsed() && (direction === 'up' && !selection.isBackward() || direction === 'down' && selection.isBackward());\n        if (isTableUnselect) {\n          let focusParentNode = $findMatchingParent(focusNode, n => $isTableNode(n));\n          if ($isTableCellNode(focusParentNode)) {\n            focusParentNode = $findMatchingParent(focusParentNode, $isTableNode);\n          }\n          if (focusParentNode !== tableNode) {\n            return false;\n          }\n          if (!focusParentNode) {\n            return false;\n          }\n          const sibling = direction === 'down' ? focusParentNode.getNextSibling() : focusParentNode.getPreviousSibling();\n          if (!sibling) {\n            return false;\n          }\n          let newOffset = 0;\n          if (direction === 'up') {\n            if ($isElementNode(sibling)) {\n              newOffset = sibling.getChildrenSize();\n            }\n          }\n          let newFocusNode = sibling;\n          if (direction === 'up') {\n            if ($isElementNode(sibling)) {\n              const lastCell = sibling.getLastChild();\n              newFocusNode = lastCell ? lastCell : sibling;\n              newOffset = $isTextNode(newFocusNode) ? newFocusNode.getTextContentSize() : 0;\n            }\n          }\n          const newSelection = selection.clone();\n          newSelection.focus.set(newFocusNode.getKey(), newOffset, $isTextNode(newFocusNode) ? 'text' : 'element');\n          $setSelection(newSelection);\n          stopEvent(event);\n          return true;\n        } else if ($isRootOrShadowRoot(focusNode)) {\n          const selectedNode = direction === 'up' ? selection.getNodes()[selection.getNodes().length - 1] : selection.getNodes()[0];\n          if (selectedNode) {\n            const tableCellNode = $findParentTableCellNodeInTable(tableNode, selectedNode);\n            if (tableCellNode !== null) {\n              const firstDescendant = tableNode.getFirstDescendant();\n              const lastDescendant = tableNode.getLastDescendant();\n              if (!firstDescendant || !lastDescendant) {\n                return false;\n              }\n              const [firstCellNode] = $getNodeTriplet(firstDescendant);\n              const [lastCellNode] = $getNodeTriplet(lastDescendant);\n              const firstCellCoords = tableNode.getCordsFromCellNode(firstCellNode, tableObserver.table);\n              const lastCellCoords = tableNode.getCordsFromCellNode(lastCellNode, tableObserver.table);\n              const firstCellDOM = tableNode.getDOMCellFromCordsOrThrow(firstCellCoords.x, firstCellCoords.y, tableObserver.table);\n              const lastCellDOM = tableNode.getDOMCellFromCordsOrThrow(lastCellCoords.x, lastCellCoords.y, tableObserver.table);\n              tableObserver.$setAnchorCellForSelection(firstCellDOM);\n              tableObserver.$setFocusCellForSelection(lastCellDOM, true);\n              return true;\n            }\n          }\n          return false;\n        } else {\n          let focusParentNode = $findMatchingParent(focusNode, n => $isElementNode(n) && !n.isInline());\n          if ($isTableCellNode(focusParentNode)) {\n            focusParentNode = $findMatchingParent(focusParentNode, $isTableNode);\n          }\n          if (!focusParentNode) {\n            return false;\n          }\n          const sibling = direction === 'down' ? focusParentNode.getNextSibling() : focusParentNode.getPreviousSibling();\n          if ($isTableNode(sibling) && tableObserver.tableNodeKey === sibling.getKey()) {\n            const firstDescendant = sibling.getFirstDescendant();\n            const lastDescendant = sibling.getLastDescendant();\n            if (!firstDescendant || !lastDescendant) {\n              return false;\n            }\n            const [firstCellNode] = $getNodeTriplet(firstDescendant);\n            const [lastCellNode] = $getNodeTriplet(lastDescendant);\n            const newSelection = selection.clone();\n            newSelection.focus.set((direction === 'up' ? firstCellNode : lastCellNode).getKey(), direction === 'up' ? 0 : lastCellNode.getChildrenSize(), 'element');\n            stopEvent(event);\n            $setSelection(newSelection);\n            return true;\n          }\n        }\n      }\n    }\n    if (direction === 'down' && $isScrollableTablesActive(editor)) {\n      // Enable Firefox workaround\n      tableObserver.setShouldCheckSelection();\n    }\n    return false;\n  }\n  if ($isRangeSelection(selection)) {\n    if (direction === 'backward' || direction === 'forward') {\n      const alter = event.shiftKey ? 'extend' : 'move';\n      return $handleHorizontalArrowKeyRangeSelection(editor, event, selection, alter, direction === 'backward', tableNode, tableObserver);\n    }\n    if (selection.isCollapsed()) {\n      const {\n        anchor,\n        focus\n      } = selection;\n      const anchorCellNode = $findMatchingParent(anchor.getNode(), $isTableCellNode);\n      const focusCellNode = $findMatchingParent(focus.getNode(), $isTableCellNode);\n      if (!$isTableCellNode(anchorCellNode) || !anchorCellNode.is(focusCellNode)) {\n        return false;\n      }\n      const anchorCellTable = $findTableNode(anchorCellNode);\n      if (anchorCellTable !== tableNode && anchorCellTable != null) {\n        const anchorCellTableElement = getTableElement(anchorCellTable, editor.getElementByKey(anchorCellTable.getKey()));\n        if (anchorCellTableElement != null) {\n          tableObserver.table = getTable(anchorCellTable, anchorCellTableElement);\n          return $handleArrowKey(editor, event, direction, anchorCellTable, tableObserver);\n        }\n      }\n      const anchorCellDom = editor.getElementByKey(anchorCellNode.__key);\n      const anchorDOM = editor.getElementByKey(anchor.key);\n      if (anchorDOM == null || anchorCellDom == null) {\n        return false;\n      }\n      let edgeSelectionRect;\n      if (anchor.type === 'element') {\n        edgeSelectionRect = anchorDOM.getBoundingClientRect();\n      } else {\n        const domSelection = getDOMSelection(getEditorWindow(editor));\n        if (domSelection === null || domSelection.rangeCount === 0) {\n          return false;\n        }\n        const range = domSelection.getRangeAt(0);\n        edgeSelectionRect = range.getBoundingClientRect();\n      }\n      const edgeChild = direction === 'up' ? anchorCellNode.getFirstChild() : anchorCellNode.getLastChild();\n      if (edgeChild == null) {\n        return false;\n      }\n      const edgeChildDOM = editor.getElementByKey(edgeChild.__key);\n      if (edgeChildDOM == null) {\n        return false;\n      }\n      const edgeRect = edgeChildDOM.getBoundingClientRect();\n      const isExiting = direction === 'up' ? edgeRect.top > edgeSelectionRect.top - edgeSelectionRect.height : edgeSelectionRect.bottom + edgeSelectionRect.height > edgeRect.bottom;\n      if (isExiting) {\n        stopEvent(event);\n        const cords = tableNode.getCordsFromCellNode(anchorCellNode, tableObserver.table);\n        if (event.shiftKey) {\n          const cell = tableNode.getDOMCellFromCordsOrThrow(cords.x, cords.y, tableObserver.table);\n          tableObserver.$setAnchorCellForSelection(cell);\n          tableObserver.$setFocusCellForSelection(cell, true);\n        } else {\n          return selectTableNodeInDirection(tableObserver, tableNode, cords.x, cords.y, direction);\n        }\n        return true;\n      }\n    }\n  } else if ($isTableSelection(selection)) {\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = $findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = $findMatchingParent(focus.getNode(), $isTableCellNode);\n    const [tableNodeFromSelection] = selection.getNodes();\n    if (!$isTableNode(tableNodeFromSelection)) {\n      formatDevErrorMessage(`$handleArrowKey: TableSelection.getNodes()[0] expected to be TableNode`);\n    }\n    const tableElement = getTableElement(tableNodeFromSelection, editor.getElementByKey(tableNodeFromSelection.getKey()));\n    if (!$isTableCellNode(anchorCellNode) || !$isTableCellNode(focusCellNode) || !$isTableNode(tableNodeFromSelection) || tableElement == null) {\n      return false;\n    }\n    tableObserver.$updateTableTableSelection(selection);\n    const grid = getTable(tableNodeFromSelection, tableElement);\n    const cordsAnchor = tableNode.getCordsFromCellNode(anchorCellNode, grid);\n    const anchorCell = tableNode.getDOMCellFromCordsOrThrow(cordsAnchor.x, cordsAnchor.y, grid);\n    tableObserver.$setAnchorCellForSelection(anchorCell);\n    stopEvent(event);\n    if (event.shiftKey) {\n      const [tableMap, anchorValue, focusValue] = $computeTableMap(tableNode, anchorCellNode, focusCellNode);\n      return $adjustFocusInDirection(tableObserver, tableMap, anchorValue, focusValue, direction);\n    } else {\n      focusCellNode.selectEnd();\n    }\n    return true;\n  }\n  return false;\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n  event.stopPropagation();\n}\nfunction isTypeaheadMenuInView(editor) {\n  // There is no inbuilt way to check if the component picker is in view\n  // but we can check if the root DOM element has the aria-controls attribute \"typeahead-menu\".\n  const root = editor.getRootElement();\n  if (!root) {\n    return false;\n  }\n  return root.hasAttribute('aria-controls') && root.getAttribute('aria-controls') === 'typeahead-menu';\n}\nfunction $insertParagraphAtTableEdge(edgePosition, tableNode, children) {\n  const paragraphNode = $createParagraphNode();\n  if (edgePosition === 'first') {\n    tableNode.insertBefore(paragraphNode);\n  } else {\n    tableNode.insertAfter(paragraphNode);\n  }\n  paragraphNode.append(...(children || []));\n  paragraphNode.selectEnd();\n}\nfunction $getTableEdgeCursorPosition(editor, selection, tableNode) {\n  const tableNodeParent = tableNode.getParent();\n  if (!tableNodeParent) {\n    return undefined;\n  }\n\n  // TODO: Add support for nested tables\n  const domSelection = getDOMSelection(getEditorWindow(editor));\n  if (!domSelection) {\n    return undefined;\n  }\n  const domAnchorNode = domSelection.anchorNode;\n  const tableNodeParentDOM = editor.getElementByKey(tableNodeParent.getKey());\n  const tableElement = getTableElement(tableNode, editor.getElementByKey(tableNode.getKey()));\n  // We are only interested in the scenario where the\n  // native selection anchor is:\n  // - at or inside the table's parent DOM\n  // - and NOT at or inside the table DOM\n  // It may be adjacent to the table DOM (e.g. in a wrapper)\n  if (!domAnchorNode || !tableNodeParentDOM || !tableElement || !tableNodeParentDOM.contains(domAnchorNode) || tableElement.contains(domAnchorNode)) {\n    return undefined;\n  }\n  const anchorCellNode = $findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n  if (!anchorCellNode) {\n    return undefined;\n  }\n  const parentTable = $findMatchingParent(anchorCellNode, n => $isTableNode(n));\n  if (!$isTableNode(parentTable) || !parentTable.is(tableNode)) {\n    return undefined;\n  }\n  const [tableMap, cellValue] = $computeTableMap(tableNode, anchorCellNode, anchorCellNode);\n  const firstCell = tableMap[0][0];\n  const lastCell = tableMap[tableMap.length - 1][tableMap[0].length - 1];\n  const {\n    startRow,\n    startColumn\n  } = cellValue;\n  const isAtFirstCell = startRow === firstCell.startRow && startColumn === firstCell.startColumn;\n  const isAtLastCell = startRow === lastCell.startRow && startColumn === lastCell.startColumn;\n  if (isAtFirstCell) {\n    return 'first';\n  } else if (isAtLastCell) {\n    return 'last';\n  } else {\n    return undefined;\n  }\n}\nfunction $getObserverCellFromCellNodeOrThrow(tableObserver, tableCellNode) {\n  const {\n    tableNode\n  } = tableObserver.$lookup();\n  const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableObserver.table);\n  return tableNode.getDOMCellFromCordsOrThrow(currentCords.x, currentCords.y, tableObserver.table);\n}\nfunction $getNearestTableCellInTableFromDOMNode(tableNode, startingDOM, editorState) {\n  return $findParentTableCellNodeInTable(tableNode, $getNearestNodeFromDOMNode(startingDOM, editorState));\n}\n\nfunction isHTMLDivElement(element) {\n  return isHTMLElement$1(element) && element.nodeName === 'DIV';\n}\nfunction updateColgroup(dom, config, colCount, colWidths) {\n  const colGroup = dom.querySelector('colgroup');\n  if (!colGroup) {\n    return;\n  }\n  const cols = [];\n  for (let i = 0; i < colCount; i++) {\n    const col = document.createElement('col');\n    const width = colWidths && colWidths[i];\n    if (width) {\n      col.style.width = `${width}px`;\n    }\n    cols.push(col);\n  }\n  colGroup.replaceChildren(...cols);\n}\nfunction setRowStriping(dom, config, rowStriping) {\n  if (rowStriping) {\n    addClassNamesToElement(dom, config.theme.tableRowStriping);\n    dom.setAttribute('data-lexical-row-striping', 'true');\n  } else {\n    removeClassNamesFromElement(dom, config.theme.tableRowStriping);\n    dom.removeAttribute('data-lexical-row-striping');\n  }\n}\nfunction setFrozenColumns(dom, tableElement, config, frozenColumnCount) {\n  if (frozenColumnCount > 0) {\n    addClassNamesToElement(dom, config.theme.tableFrozenColumn);\n    tableElement.setAttribute('data-lexical-frozen-column', 'true');\n  } else {\n    removeClassNamesFromElement(dom, config.theme.tableFrozenColumn);\n    tableElement.removeAttribute('data-lexical-frozen-column');\n  }\n}\nfunction setFrozenRows(dom, tableElement, config, frozenRowCount) {\n  if (frozenRowCount > 0) {\n    addClassNamesToElement(dom, config.theme.tableFrozenRow);\n    tableElement.setAttribute('data-lexical-frozen-row', 'true');\n  } else {\n    removeClassNamesFromElement(dom, config.theme.tableFrozenRow);\n    tableElement.removeAttribute('data-lexical-frozen-row');\n  }\n}\nfunction alignTableElement(dom, config, formatType) {\n  if (!config.theme.tableAlignment) {\n    return;\n  }\n  const removeClasses = [];\n  const addClasses = [];\n  for (const format of ['center', 'right']) {\n    const classes = config.theme.tableAlignment[format];\n    if (!classes) {\n      continue;\n    }\n    (format === formatType ? addClasses : removeClasses).push(classes);\n  }\n  removeClassNamesFromElement(dom, ...removeClasses);\n  addClassNamesToElement(dom, ...addClasses);\n}\nconst scrollableEditors = new WeakSet();\nfunction $isScrollableTablesActive(editor = $getEditor()) {\n  return scrollableEditors.has(editor);\n}\nfunction setScrollableTablesActive(editor, active) {\n  if (active) {\n    if (!editor._config.theme.tableScrollableWrapper) {\n      console.warn('TableNode: hasHorizontalScroll is active but theme.tableScrollableWrapper is not defined.');\n    }\n    scrollableEditors.add(editor);\n  } else {\n    scrollableEditors.delete(editor);\n  }\n}\n\n/** @noInheritDoc */\nclass TableNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'table';\n  }\n  getColWidths() {\n    const self = this.getLatest();\n    return self.__colWidths;\n  }\n  setColWidths(colWidths) {\n    const self = this.getWritable();\n    // NOTE: Node properties should be immutable. Freeze to prevent accidental mutation.\n    self.__colWidths = colWidths !== undefined && true ? Object.freeze(colWidths) : colWidths;\n    return self;\n  }\n  static clone(node) {\n    return new TableNode(node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__colWidths = prevNode.__colWidths;\n    this.__rowStriping = prevNode.__rowStriping;\n    this.__frozenColumnCount = prevNode.__frozenColumnCount;\n    this.__frozenRowCount = prevNode.__frozenRowCount;\n  }\n  static importDOM() {\n    return {\n      table: _node => ({\n        conversion: $convertTableElement,\n        priority: 1\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createTableNode().updateFromJSON(serializedNode);\n  }\n  updateFromJSON(serializedNode) {\n    return super.updateFromJSON(serializedNode).setRowStriping(serializedNode.rowStriping || false).setFrozenColumns(serializedNode.frozenColumnCount || 0).setFrozenRows(serializedNode.frozenRowCount || 0).setColWidths(serializedNode.colWidths);\n  }\n  constructor(key) {\n    super(key);\n    this.__rowStriping = false;\n    this.__frozenColumnCount = 0;\n    this.__frozenRowCount = 0;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      colWidths: this.getColWidths(),\n      frozenColumnCount: this.__frozenColumnCount ? this.__frozenColumnCount : undefined,\n      frozenRowCount: this.__frozenRowCount ? this.__frozenRowCount : undefined,\n      rowStriping: this.__rowStriping ? this.__rowStriping : undefined\n    };\n  }\n  extractWithChild(child, selection, destination) {\n    return destination === 'html';\n  }\n  getDOMSlot(element) {\n    const tableElement = !isHTMLTableElement(element) ? element.querySelector('table') : element;\n    if (!isHTMLTableElement(tableElement)) {\n      formatDevErrorMessage(`TableNode.getDOMSlot: createDOM() did not return a table`);\n    }\n    return super.getDOMSlot(element).withElement(tableElement).withAfter(tableElement.querySelector('colgroup'));\n  }\n  createDOM(config, editor) {\n    const tableElement = document.createElement('table');\n    if (this.__style) {\n      tableElement.style.cssText = this.__style;\n    }\n    const colGroup = document.createElement('colgroup');\n    tableElement.appendChild(colGroup);\n    setDOMUnmanaged(colGroup);\n    addClassNamesToElement(tableElement, config.theme.table);\n    this.updateTableElement(null, tableElement, config);\n    if ($isScrollableTablesActive(editor)) {\n      const wrapperElement = document.createElement('div');\n      const classes = config.theme.tableScrollableWrapper;\n      if (classes) {\n        addClassNamesToElement(wrapperElement, classes);\n      } else {\n        wrapperElement.style.cssText = 'overflow-x: auto;';\n      }\n      wrapperElement.appendChild(tableElement);\n      this.updateTableWrapper(null, wrapperElement, tableElement, config);\n      return wrapperElement;\n    }\n    return tableElement;\n  }\n  updateTableWrapper(prevNode, tableWrapper, tableElement, config) {\n    if (this.__frozenColumnCount !== (prevNode ? prevNode.__frozenColumnCount : 0)) {\n      setFrozenColumns(tableWrapper, tableElement, config, this.__frozenColumnCount);\n    }\n    if (this.__frozenRowCount !== (prevNode ? prevNode.__frozenRowCount : 0)) {\n      setFrozenRows(tableWrapper, tableElement, config, this.__frozenRowCount);\n    }\n  }\n  updateTableElement(prevNode, tableElement, config) {\n    if (this.__style !== (prevNode ? prevNode.__style : '')) {\n      tableElement.style.cssText = this.__style;\n    }\n    if (this.__rowStriping !== (prevNode ? prevNode.__rowStriping : false)) {\n      setRowStriping(tableElement, config, this.__rowStriping);\n    }\n    updateColgroup(tableElement, config, this.getColumnCount(), this.getColWidths());\n    alignTableElement(tableElement, config, this.getFormatType());\n  }\n  updateDOM(prevNode, dom, config) {\n    const slot = this.getDOMSlot(dom);\n    const tableElement = slot.element;\n    if (dom === tableElement === $isScrollableTablesActive()) {\n      return true;\n    }\n    if (isHTMLDivElement(dom)) {\n      this.updateTableWrapper(prevNode, dom, tableElement, config);\n    }\n    this.updateTableElement(prevNode, tableElement, config);\n    return false;\n  }\n  exportDOM(editor) {\n    const superExport = super.exportDOM(editor);\n    const {\n      element\n    } = superExport;\n    return {\n      after: tableElement => {\n        if (superExport.after) {\n          tableElement = superExport.after(tableElement);\n        }\n        if (!isHTMLTableElement(tableElement) && isHTMLElement$1(tableElement)) {\n          tableElement = tableElement.querySelector('table');\n        }\n        if (!isHTMLTableElement(tableElement)) {\n          return null;\n        }\n        alignTableElement(tableElement, editor._config, this.getFormatType());\n\n        // Scan the table map to build a map of table cell key to the columns it needs\n        const [tableMap] = $computeTableMapSkipCellCheck(this, null, null);\n        const cellValues = new Map();\n        for (const mapRow of tableMap) {\n          for (const mapValue of mapRow) {\n            const key = mapValue.cell.getKey();\n            if (!cellValues.has(key)) {\n              cellValues.set(key, {\n                colSpan: mapValue.cell.getColSpan(),\n                startColumn: mapValue.startColumn\n              });\n            }\n          }\n        }\n\n        // scan the DOM to find the table cell keys that were used and mark those columns\n        const knownColumns = new Set();\n        for (const cellDOM of tableElement.querySelectorAll(':scope > tr > [data-temporary-table-cell-lexical-key]')) {\n          const key = cellDOM.getAttribute('data-temporary-table-cell-lexical-key');\n          if (key) {\n            const cellSpan = cellValues.get(key);\n            cellDOM.removeAttribute('data-temporary-table-cell-lexical-key');\n            if (cellSpan) {\n              cellValues.delete(key);\n              for (let i = 0; i < cellSpan.colSpan; i++) {\n                knownColumns.add(i + cellSpan.startColumn);\n              }\n            }\n          }\n        }\n\n        // Compute the colgroup and columns in the export\n        const colGroup = tableElement.querySelector(':scope > colgroup');\n        if (colGroup) {\n          // Only include the <col /> for rows that are in the output\n          const cols = Array.from(tableElement.querySelectorAll(':scope > colgroup > col')).filter((dom, i) => knownColumns.has(i));\n          colGroup.replaceChildren(...cols);\n        }\n\n        // Wrap direct descendant rows in a tbody for export\n        const rows = tableElement.querySelectorAll(':scope > tr');\n        if (rows.length > 0) {\n          const tBody = document.createElement('tbody');\n          for (const row of rows) {\n            tBody.appendChild(row);\n          }\n          tableElement.append(tBody);\n        }\n        return tableElement;\n      },\n      element: !isHTMLTableElement(element) && isHTMLElement$1(element) ? element.querySelector('table') : element\n    };\n  }\n  canBeEmpty() {\n    return false;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  getCordsFromCellNode(tableCellNode, table) {\n    const {\n      rows,\n      domRows\n    } = table;\n    for (let y = 0; y < rows; y++) {\n      const row = domRows[y];\n      if (row == null) {\n        continue;\n      }\n      for (let x = 0; x < row.length; x++) {\n        const cell = row[x];\n        if (cell == null) {\n          continue;\n        }\n        const {\n          elem\n        } = cell;\n        const cellNode = $getNearestTableCellInTableFromDOMNode(this, elem);\n        if (cellNode !== null && tableCellNode.is(cellNode)) {\n          return {\n            x,\n            y\n          };\n        }\n      }\n    }\n    throw new Error('Cell not found in table.');\n  }\n  getDOMCellFromCords(x, y, table) {\n    const {\n      domRows\n    } = table;\n    const row = domRows[y];\n    if (row == null) {\n      return null;\n    }\n    const index = x < row.length ? x : row.length - 1;\n    const cell = row[index];\n    if (cell == null) {\n      return null;\n    }\n    return cell;\n  }\n  getDOMCellFromCordsOrThrow(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (!cell) {\n      throw new Error('Cell not found at cords.');\n    }\n    return cell;\n  }\n  getCellNodeFromCords(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (cell == null) {\n      return null;\n    }\n    const node = $getNearestNodeFromDOMNode(cell.elem);\n    if ($isTableCellNode(node)) {\n      return node;\n    }\n    return null;\n  }\n  getCellNodeFromCordsOrThrow(x, y, table) {\n    const node = this.getCellNodeFromCords(x, y, table);\n    if (!node) {\n      throw new Error('Node at cords not TableCellNode.');\n    }\n    return node;\n  }\n  getRowStriping() {\n    return Boolean(this.getLatest().__rowStriping);\n  }\n  setRowStriping(newRowStriping) {\n    const self = this.getWritable();\n    self.__rowStriping = newRowStriping;\n    return self;\n  }\n  setFrozenColumns(columnCount) {\n    const self = this.getWritable();\n    self.__frozenColumnCount = columnCount;\n    return self;\n  }\n  getFrozenColumns() {\n    return this.getLatest().__frozenColumnCount;\n  }\n  setFrozenRows(rowCount) {\n    const self = this.getWritable();\n    self.__frozenRowCount = rowCount;\n    return self;\n  }\n  getFrozenRows() {\n    return this.getLatest().__frozenRowCount;\n  }\n  canSelectBefore() {\n    return true;\n  }\n  canIndent() {\n    return false;\n  }\n  getColumnCount() {\n    const firstRow = this.getFirstChild();\n    if (!firstRow) {\n      return 0;\n    }\n    let columnCount = 0;\n    firstRow.getChildren().forEach(cell => {\n      if ($isTableCellNode(cell)) {\n        columnCount += cell.getColSpan();\n      }\n    });\n    return columnCount;\n  }\n}\nfunction $getElementForTableNode(editor, tableNode) {\n  const tableElement = editor.getElementByKey(tableNode.getKey());\n  if (!(tableElement !== null)) {\n    formatDevErrorMessage(`$getElementForTableNode: Table Element Not Found`);\n  }\n  return getTable(tableNode, tableElement);\n}\nfunction $convertTableElement(domNode) {\n  const tableNode = $createTableNode();\n  if (domNode.hasAttribute('data-lexical-row-striping')) {\n    tableNode.setRowStriping(true);\n  }\n  if (domNode.hasAttribute('data-lexical-frozen-column')) {\n    tableNode.setFrozenColumns(1);\n  }\n  if (domNode.hasAttribute('data-lexical-frozen-row')) {\n    tableNode.setFrozenRows(1);\n  }\n  const colGroup = domNode.querySelector(':scope > colgroup');\n  if (colGroup) {\n    let columns = [];\n    for (const col of colGroup.querySelectorAll(':scope > col')) {\n      let width = col.style.width || '';\n      if (!PIXEL_VALUE_REG_EXP.test(width)) {\n        // Also support deprecated width attribute for google docs\n        width = col.getAttribute('width') || '';\n        if (!/^\\d+$/.test(width)) {\n          columns = undefined;\n          break;\n        }\n      }\n      columns.push(parseFloat(width));\n    }\n    if (columns) {\n      tableNode.setColWidths(columns);\n    }\n  }\n  return {\n    after: children => $descendantsMatching(children, $isTableRowNode),\n    node: tableNode\n  };\n}\nfunction $createTableNode() {\n  return $applyNodeReplacement(new TableNode());\n}\nfunction $isTableNode(node) {\n  return node instanceof TableNode;\n}\n\nfunction $insertTableCommandListener({\n  rows,\n  columns,\n  includeHeaders\n}) {\n  const selection = $getSelection() || $getPreviousSelection();\n  if (!selection || !$isRangeSelection(selection)) {\n    return false;\n  }\n\n  // Prevent nested tables by checking if we're already inside a table\n  if ($findTableNode(selection.anchor.getNode())) {\n    return false;\n  }\n  const tableNode = $createTableNodeWithDimensions(Number(rows), Number(columns), includeHeaders);\n  $insertNodeToNearestRoot(tableNode);\n  const firstDescendant = tableNode.getFirstDescendant();\n  if ($isTextNode(firstDescendant)) {\n    firstDescendant.select();\n  }\n  return true;\n}\nfunction $tableCellTransform(node) {\n  if (!$isTableRowNode(node.getParent())) {\n    // TableCellNode must be a child of TableRowNode.\n    node.remove();\n  } else if (node.isEmpty()) {\n    // TableCellNode should never be empty\n    node.append($createParagraphNode());\n  }\n}\nfunction $tableRowTransform(node) {\n  if (!$isTableNode(node.getParent())) {\n    // TableRowNode must be a child of TableNode.\n    // TODO: Future support of tbody/thead/tfoot may change this\n    node.remove();\n  } else {\n    $unwrapAndFilterDescendants(node, $isTableCellNode);\n  }\n}\nfunction $tableTransform(node) {\n  // TableRowNode is the only valid child for TableNode\n  // TODO: Future support of tbody/thead/tfoot/caption may change this\n  $unwrapAndFilterDescendants(node, $isTableRowNode);\n  const [gridMap] = $computeTableMapSkipCellCheck(node, null, null);\n  const maxRowLength = gridMap.reduce((curLength, row) => {\n    return Math.max(curLength, row.length);\n  }, 0);\n  const rowNodes = node.getChildren();\n  for (let i = 0; i < gridMap.length; ++i) {\n    const rowNode = rowNodes[i];\n    if (!rowNode) {\n      continue;\n    }\n    if (!$isTableRowNode(rowNode)) {\n      formatDevErrorMessage(`TablePlugin: Expecting all children of TableNode to be TableRowNode, found ${rowNode.constructor.name} (type ${rowNode.getType()})`);\n    }\n    const rowLength = gridMap[i].reduce((acc, cell) => cell ? 1 + acc : acc, 0);\n    if (rowLength === maxRowLength) {\n      continue;\n    }\n    for (let j = rowLength; j < maxRowLength; ++j) {\n      // TODO: inherit header state from another header or body\n      const newCell = $createTableCellNode();\n      newCell.append($createParagraphNode());\n      rowNode.append(newCell);\n    }\n  }\n}\nfunction $tableClickCommand(event) {\n  if (event.detail < 3 || !isDOMNode(event.target)) {\n    return false;\n  }\n  const startNode = $getNearestNodeFromDOMNode(event.target);\n  if (startNode === null) {\n    return false;\n  }\n  const blockNode = $findMatchingParent(startNode, node => $isElementNode(node) && !node.isInline());\n  if (blockNode === null) {\n    return false;\n  }\n  const rootNode = blockNode.getParent();\n  if (!$isTableCellNode(rootNode)) {\n    return false;\n  }\n  blockNode.select(0);\n  return true;\n}\n\n/**\n * Register a transform to ensure that all TableCellNode have a colSpan and rowSpan of 1.\n * This should only be registered when you do not want to support merged cells.\n *\n * @param editor The editor\n * @returns An unregister callback\n */\nfunction registerTableCellUnmergeTransform(editor) {\n  return editor.registerNodeTransform(TableCellNode, node => {\n    if (node.getColSpan() > 1 || node.getRowSpan() > 1) {\n      // When we have rowSpan we have to map the entire Table to understand where the new Cells\n      // fit best; let's analyze all Cells at once to save us from further transform iterations\n      const [,, gridNode] = $getNodeTriplet(node);\n      const [gridMap] = $computeTableMap(gridNode, node, node);\n      // TODO this function expects Tables to be normalized. Look into this once it exists\n      const rowsCount = gridMap.length;\n      const columnsCount = gridMap[0].length;\n      let row = gridNode.getFirstChild();\n      if (!$isTableRowNode(row)) {\n        formatDevErrorMessage(`Expected TableNode first child to be a RowNode`);\n      }\n      const unmerged = [];\n      for (let i = 0; i < rowsCount; i++) {\n        if (i !== 0) {\n          row = row.getNextSibling();\n          if (!$isTableRowNode(row)) {\n            formatDevErrorMessage(`Expected TableNode first child to be a RowNode`);\n          }\n        }\n        let lastRowCell = null;\n        for (let j = 0; j < columnsCount; j++) {\n          const cellMap = gridMap[i][j];\n          const cell = cellMap.cell;\n          if (cellMap.startRow === i && cellMap.startColumn === j) {\n            lastRowCell = cell;\n            unmerged.push(cell);\n          } else if (cell.getColSpan() > 1 || cell.getRowSpan() > 1) {\n            if (!$isTableCellNode(cell)) {\n              formatDevErrorMessage(`Expected TableNode cell to be a TableCellNode`);\n            }\n            const newCell = $createTableCellNode(cell.__headerState);\n            if (lastRowCell !== null) {\n              lastRowCell.insertAfter(newCell);\n            } else {\n              $insertFirst$1(row, newCell);\n            }\n          }\n        }\n      }\n      for (const cell of unmerged) {\n        cell.setColSpan(1);\n        cell.setRowSpan(1);\n      }\n    }\n  });\n}\nfunction registerTableSelectionObserver(editor, hasTabHandler = true) {\n  const tableSelections = new Map();\n  const initializeTableNode = (tableNode, nodeKey, dom) => {\n    const tableElement = getTableElement(tableNode, dom);\n    const tableSelection = applyTableHandlers(tableNode, tableElement, editor, hasTabHandler);\n    tableSelections.set(nodeKey, [tableSelection, tableElement]);\n  };\n  const unregisterMutationListener = editor.registerMutationListener(TableNode, nodeMutations => {\n    editor.getEditorState().read(() => {\n      for (const [nodeKey, mutation] of nodeMutations) {\n        const tableSelection = tableSelections.get(nodeKey);\n        if (mutation === 'created' || mutation === 'updated') {\n          const {\n            tableNode,\n            tableElement\n          } = $getTableAndElementByKey(nodeKey);\n          if (tableSelection === undefined) {\n            initializeTableNode(tableNode, nodeKey, tableElement);\n          } else if (tableElement !== tableSelection[1]) {\n            // The update created a new DOM node, destroy the existing TableObserver\n            tableSelection[0].removeListeners();\n            tableSelections.delete(nodeKey);\n            initializeTableNode(tableNode, nodeKey, tableElement);\n          }\n        } else if (mutation === 'destroyed') {\n          if (tableSelection !== undefined) {\n            tableSelection[0].removeListeners();\n            tableSelections.delete(nodeKey);\n          }\n        }\n      }\n    }, {\n      editor\n    });\n  }, {\n    skipInitialization: false\n  });\n  return () => {\n    unregisterMutationListener();\n    // Hook might be called multiple times so cleaning up tables listeners as well,\n    // as it'll be reinitialized during recurring call\n    for (const [, [tableSelection]] of tableSelections) {\n      tableSelection.removeListeners();\n    }\n  };\n}\n\n/**\n * Register the INSERT_TABLE_COMMAND listener and the table integrity transforms. The\n * table selection observer should be registered separately after this with\n * {@link registerTableSelectionObserver}.\n *\n * @param editor The editor\n * @returns An unregister callback\n */\nfunction registerTablePlugin(editor) {\n  if (!editor.hasNodes([TableNode])) {\n    {\n      formatDevErrorMessage(`TablePlugin: TableNode is not registered on editor`);\n    }\n  }\n  return mergeRegister(editor.registerCommand(INSERT_TABLE_COMMAND, $insertTableCommandListener, COMMAND_PRIORITY_EDITOR), editor.registerCommand(SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, ({\n    nodes,\n    selection\n  }) => {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    const isInsideTableCell = $findTableNode(selection.anchor.getNode()) !== null;\n    return isInsideTableCell && nodes.some($isTableNode);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CLICK_COMMAND, $tableClickCommand, COMMAND_PRIORITY_EDITOR), editor.registerNodeTransform(TableNode, $tableTransform), editor.registerNodeTransform(TableRowNode, $tableRowTransform), editor.registerNodeTransform(TableCellNode, $tableCellTransform));\n}\n\nexport { $computeTableMap, $computeTableMapSkipCellCheck, $createTableCellNode, $createTableNode, $createTableNodeWithDimensions, $createTableRowNode, $createTableSelection, $createTableSelectionFrom, $deleteTableColumn, $deleteTableColumnAtSelection, $deleteTableColumn__EXPERIMENTAL, $deleteTableRowAtSelection, $deleteTableRow__EXPERIMENTAL, $findCellNode, $findTableNode, $getElementForTableNode, $getNodeTriplet, $getTableAndElementByKey, $getTableCellNodeFromLexicalNode, $getTableCellNodeRect, $getTableColumnIndexFromTableCellNode, $getTableNodeFromLexicalNodeOrThrow, $getTableRowIndexFromTableCellNode, $getTableRowNodeFromTableCellNodeOrThrow, $insertTableColumn, $insertTableColumnAtSelection, $insertTableColumn__EXPERIMENTAL, $insertTableRow, $insertTableRowAtSelection, $insertTableRow__EXPERIMENTAL, $isScrollableTablesActive, $isTableCellNode, $isTableNode, $isTableRowNode, $isTableSelection, $mergeCells, $removeTableRowAtIndex, $unmergeCell, INSERT_TABLE_COMMAND, TableCellHeaderStates, TableCellNode, TableNode, TableObserver, TableRowNode, applyTableHandlers, getDOMCellFromTarget, getTableElement, getTableObserverFromTableElement, registerTableCellUnmergeTransform, registerTablePlugin, registerTableSelectionObserver, setScrollableTablesActive };\n"],
  "mappings": "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",
  "names": ["$insertFirst"]
}
