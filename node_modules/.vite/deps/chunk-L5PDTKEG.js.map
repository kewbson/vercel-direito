{
  "version": 3,
  "sources": ["../../.pnpm/@lexical+rich-text@0.32.1/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $insertDataTransferForRichText, copyToClipboard } from '@lexical/clipboard';\nimport { $shouldOverrideDefaultCharacterSelection, $moveCharacter } from '@lexical/selection';\nimport { addClassNamesToElement, isHTMLElement, objectKlassEquals, mergeRegister, $findMatchingParent, $getNearestBlockElementAncestorOrThrow } from '@lexical/utils';\nimport { createCommand, ElementNode, $createParagraphNode, $applyNodeReplacement, setNodeIndentFromDOM, CLICK_COMMAND, $getSelection, $isNodeSelection, COMMAND_PRIORITY_EDITOR, DELETE_CHARACTER_COMMAND, $isRangeSelection, DELETE_WORD_COMMAND, DELETE_LINE_COMMAND, CONTROLLED_TEXT_INSERTION_COMMAND, REMOVE_TEXT_COMMAND, FORMAT_TEXT_COMMAND, FORMAT_ELEMENT_COMMAND, $isElementNode, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, $insertNodes, $createTabNode, INDENT_CONTENT_COMMAND, OUTDENT_CONTENT_COMMAND, KEY_ARROW_UP_COMMAND, $getAdjacentNode, $isDecoratorNode, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, DROP_COMMAND, $getNearestNodeFromDOMNode, $createRangeSelection, $isTextNode, $normalizeSelection__EXPERIMENTAL, $setSelection, DRAGSTART_COMMAND, DRAGOVER_COMMAND, SELECT_ALL_COMMAND, $selectAll, COPY_COMMAND, CUT_COMMAND, PASTE_COMMAND, isDOMNode, isSelectionCapturedInDecoratorInput, KEY_SPACE_COMMAND, KEY_TAB_COMMAND, PASTE_TAG, $getRoot, $isRootNode } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction caretFromPoint(x, y) {\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\n    const range = document.caretRangeFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.startContainer,\n      offset: range.startOffset\n    };\n    // @ts-ignore\n  } else if (document.caretPositionFromPoint !== 'undefined') {\n    // @ts-ignore FF - no types\n    const range = document.caretPositionFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.offsetNode,\n      offset: range.offset\n    };\n  } else {\n    // Gracefully handle IE\n    return null;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DRAG_DROP_PASTE = createCommand('DRAG_DROP_PASTE_FILE');\n/** @noInheritDoc */\nclass QuoteNode extends ElementNode {\n  static getType() {\n    return 'quote';\n  }\n  static clone(node) {\n    return new QuoteNode(node.__key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const element = document.createElement('blockquote');\n    addClassNamesToElement(element, config.theme.quote);\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      blockquote: node => ({\n        conversion: $convertBlockquoteElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      if (formatType) {\n        element.style.textAlign = formatType;\n      }\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createQuoteNode().updateFromJSON(serializedNode);\n  }\n\n  // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newBlock = $createParagraphNode();\n    const direction = this.getDirection();\n    newBlock.setDirection(direction);\n    this.insertAfter(newBlock, restoreSelection);\n    return newBlock;\n  }\n  collapseAtStart() {\n    const paragraph = $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n  canMergeWhenEmpty() {\n    return true;\n  }\n}\nfunction $createQuoteNode() {\n  return $applyNodeReplacement(new QuoteNode());\n}\nfunction $isQuoteNode(node) {\n  return node instanceof QuoteNode;\n}\n/** @noInheritDoc */\nclass HeadingNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'heading';\n  }\n  static clone(node) {\n    return new HeadingNode(node.__tag, node.__key);\n  }\n  constructor(tag, key) {\n    super(key);\n    this.__tag = tag;\n  }\n  getTag() {\n    return this.__tag;\n  }\n  setTag(tag) {\n    const self = this.getWritable();\n    this.__tag = tag;\n    return self;\n  }\n\n  // View\n\n  createDOM(config) {\n    const tag = this.__tag;\n    const element = document.createElement(tag);\n    const theme = config.theme;\n    const classNames = theme.heading;\n    if (classNames !== undefined) {\n      const className = classNames[tag];\n      addClassNamesToElement(element, className);\n    }\n    return element;\n  }\n  updateDOM(prevNode, dom, config) {\n    return prevNode.__tag !== this.__tag;\n  }\n  static importDOM() {\n    return {\n      h1: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h2: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h3: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h4: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h5: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h6: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      p: node => {\n        // domNode is a <p> since we matched it by nodeName\n        const paragraph = node;\n        const firstChild = paragraph.firstChild;\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\n          return {\n            conversion: () => ({\n              node: null\n            }),\n            priority: 3\n          };\n        }\n        return null;\n      },\n      span: node => {\n        if (isGoogleDocsTitle(node)) {\n          return {\n            conversion: domNode => {\n              return {\n                node: $createHeadingNode('h1')\n              };\n            },\n            priority: 3\n          };\n        }\n        return null;\n      }\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      if (formatType) {\n        element.style.textAlign = formatType;\n      }\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createHeadingNode(serializedNode.tag).updateFromJSON(serializedNode);\n  }\n  updateFromJSON(serializedNode) {\n    return super.updateFromJSON(serializedNode).setTag(serializedNode.tag);\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      tag: this.getTag()\n    };\n  }\n\n  // Mutation\n  insertNewAfter(selection, restoreSelection = true) {\n    const anchorOffet = selection ? selection.anchor.offset : 0;\n    const lastDesc = this.getLastDescendant();\n    const isAtEnd = !lastDesc || selection && selection.anchor.key === lastDesc.getKey() && anchorOffet === lastDesc.getTextContentSize();\n    const newElement = isAtEnd || !selection ? $createParagraphNode() : $createHeadingNode(this.getTag());\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    if (anchorOffet === 0 && !this.isEmpty() && selection) {\n      const paragraph = $createParagraphNode();\n      paragraph.select();\n      this.replace(paragraph, true);\n    }\n    return newElement;\n  }\n  collapseAtStart() {\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => newElement.append(child));\n    this.replace(newElement);\n    return true;\n  }\n  extractWithChild() {\n    return true;\n  }\n}\nfunction isGoogleDocsTitle(domNode) {\n  if (domNode.nodeName.toLowerCase() === 'span') {\n    return domNode.style.fontSize === '26pt';\n  }\n  return false;\n}\nfunction $convertHeadingElement(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  let node = null;\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\n    node = $createHeadingNode(nodeName);\n    if (element.style !== null) {\n      setNodeIndentFromDOM(element, node);\n      node.setFormat(element.style.textAlign);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $convertBlockquoteElement(element) {\n  const node = $createQuoteNode();\n  if (element.style !== null) {\n    node.setFormat(element.style.textAlign);\n    setNodeIndentFromDOM(element, node);\n  }\n  return {\n    node\n  };\n}\nfunction $createHeadingNode(headingTag = 'h1') {\n  return $applyNodeReplacement(new HeadingNode(headingTag));\n}\nfunction $isHeadingNode(node) {\n  return node instanceof HeadingNode;\n}\nfunction onPasteForRichText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = $getSelection();\n    const clipboardData = objectKlassEquals(event, InputEvent) || objectKlassEquals(event, KeyboardEvent) ? null : event.clipboardData;\n    if (clipboardData != null && selection !== null) {\n      $insertDataTransferForRichText(clipboardData, selection, editor);\n    }\n  }, {\n    tag: PASTE_TAG\n  });\n}\nasync function onCutForRichText(event, editor) {\n  await copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n  editor.update(() => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      selection.removeText();\n    } else if ($isNodeSelection(selection)) {\n      selection.getNodes().forEach(node => node.remove());\n    }\n  });\n}\n\n// Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\n// in certain occasions, we want to know whether it was a file transfer, as opposed to text. We\n// control this with the first boolean flag.\nfunction eventFiles(event) {\n  let dataTransfer = null;\n  if (objectKlassEquals(event, DragEvent)) {\n    dataTransfer = event.dataTransfer;\n  } else if (objectKlassEquals(event, ClipboardEvent)) {\n    dataTransfer = event.clipboardData;\n  }\n  if (dataTransfer === null) {\n    return [false, [], false];\n  }\n  const types = dataTransfer.types;\n  const hasFiles = types.includes('Files');\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\n}\nfunction $handleIndentAndOutdent(indentOrOutdent) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection)) {\n    return false;\n  }\n  const alreadyHandled = new Set();\n  const nodes = selection.getNodes();\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const key = node.getKey();\n    if (alreadyHandled.has(key)) {\n      continue;\n    }\n    const parentBlock = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n    if (parentBlock === null) {\n      continue;\n    }\n    const parentKey = parentBlock.getKey();\n    if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\n      alreadyHandled.add(parentKey);\n      indentOrOutdent(parentBlock);\n    }\n  }\n  return alreadyHandled.size > 0;\n}\nfunction $isTargetWithinDecorator(target) {\n  const node = $getNearestNodeFromDOMNode(target);\n  return $isDecoratorNode(node);\n}\nfunction $isSelectionAtEndOfRoot(selection) {\n  const focus = selection.focus;\n  return focus.key === 'root' && focus.offset === $getRoot().getChildrenSize();\n}\nfunction $isSelectionCollapsedAtFrontOfIndentedBlock(selection) {\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const {\n    anchor\n  } = selection;\n  if (anchor.offset !== 0) {\n    return false;\n  }\n  const anchorNode = anchor.getNode();\n  if ($isRootNode(anchorNode)) {\n    return false;\n  }\n  const element = $getNearestBlockElementAncestorOrThrow(anchorNode);\n  return element.getIndent() > 0 && (element.is(anchorNode) || anchorNode.is(element.getFirstDescendant()));\n}\n\n/**\n * Resets the capitalization of the selection to default.\n * Called when the user presses space, tab, or enter key.\n * @param selection The selection to reset the capitalization of.\n */\nfunction $resetCapitalization(selection) {\n  for (const format of ['lowercase', 'uppercase', 'capitalize']) {\n    if (selection.hasFormat(format)) {\n      selection.toggleFormat(format);\n    }\n  }\n}\nfunction registerRichText(editor) {\n  const removeListener = mergeRegister(editor.registerCommand(CLICK_COMMAND, payload => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      selection.clear();\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      selection.deleteCharacter(isBackward);\n      return true;\n    } else if ($isNodeSelection(selection)) {\n      selection.deleteNodes();\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_WORD_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteWord(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_LINE_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteLine(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = $getSelection();\n    if (typeof eventOrText === 'string') {\n      if (selection !== null) {\n        selection.insertText(eventOrText);\n      }\n    } else {\n      if (selection === null) {\n        return false;\n      }\n      const dataTransfer = eventOrText.dataTransfer;\n      if (dataTransfer != null) {\n        $insertDataTransferForRichText(dataTransfer, selection, editor);\n      } else if ($isRangeSelection(selection)) {\n        const data = eventOrText.data;\n        if (data) {\n          selection.insertText(data);\n        }\n        return true;\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(REMOVE_TEXT_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.removeText();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_TEXT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.formatText(format);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_ELEMENT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection) && !$isNodeSelection(selection)) {\n      return false;\n    }\n    const nodes = selection.getNodes();\n    for (const node of nodes) {\n      const element = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n      if (element !== null) {\n        element.setFormat(format);\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertParagraph();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_TAB_COMMAND, () => {\n    $insertNodes([$createTabNode()]);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      block.setIndent(indent + 1);\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(OUTDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      if (indent > 0) {\n        block.setIndent(Math.max(0, indent - 1));\n      }\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_UP_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectPrevious();\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      const possibleNode = $getAdjacentNode(selection.focus, true);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectPrevious();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      if ($isSelectionAtEndOfRoot(selection)) {\n        event.preventDefault();\n        return true;\n      }\n      const possibleNode = $getAdjacentNode(selection.focus, false);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectNext();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_LEFT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectPrevious();\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    if ($shouldOverrideDefaultCharacterSelection(selection, true)) {\n      const isHoldingShift = event.shiftKey;\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, true);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_RIGHT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    const isHoldingShift = event.shiftKey;\n    if ($shouldOverrideDefaultCharacterSelection(selection, false)) {\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, false);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_BACKSPACE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      if ($isSelectionCollapsedAtFrontOfIndentedBlock(selection)) {\n        event.preventDefault();\n        return editor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined);\n      }\n      // Exception handling for iOS native behavior instead of Lexical's behavior when using Korean on iOS devices.\n      // more details - https://github.com/facebook/lexical/issues/5841\n      if (IS_IOS && navigator.language === 'ko-KR') {\n        return false;\n      }\n    } else if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, true);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_DELETE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!($isRangeSelection(selection) || $isNodeSelection(selection))) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, false);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ENTER_COMMAND, event => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    $resetCapitalization(selection);\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n      event.preventDefault();\n      if (event.shiftKey) {\n        return editor.dispatchCommand(INSERT_LINE_BREAK_COMMAND, false);\n      }\n    }\n    return editor.dispatchCommand(INSERT_PARAGRAPH_COMMAND, undefined);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ESCAPE_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    editor.blur();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DROP_COMMAND, event => {\n    const [, files] = eventFiles(event);\n    if (files.length > 0) {\n      const x = event.clientX;\n      const y = event.clientY;\n      const eventRange = caretFromPoint(x, y);\n      if (eventRange !== null) {\n        const {\n          offset: domOffset,\n          node: domNode\n        } = eventRange;\n        const node = $getNearestNodeFromDOMNode(domNode);\n        if (node !== null) {\n          const selection = $createRangeSelection();\n          if ($isTextNode(node)) {\n            selection.anchor.set(node.getKey(), domOffset, 'text');\n            selection.focus.set(node.getKey(), domOffset, 'text');\n          } else {\n            const parentKey = node.getParentOrThrow().getKey();\n            const offset = node.getIndexWithinParent() + 1;\n            selection.anchor.set(parentKey, offset, 'element');\n            selection.focus.set(parentKey, offset, 'element');\n          }\n          const normalizedSelection = $normalizeSelection__EXPERIMENTAL(selection);\n          $setSelection(normalizedSelection);\n        }\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      }\n      event.preventDefault();\n      return true;\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGSTART_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGOVER_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    const x = event.clientX;\n    const y = event.clientY;\n    const eventRange = caretFromPoint(x, y);\n    if (eventRange !== null) {\n      const node = $getNearestNodeFromDOMNode(eventRange.node);\n      if ($isDecoratorNode(node)) {\n        // Show browser caret as the user is dragging the media across the screen. Won't work\n        // for DecoratorNode nor it's relevant.\n        event.preventDefault();\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(SELECT_ALL_COMMAND, () => {\n    $selectAll();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(COPY_COMMAND, event => {\n    copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CUT_COMMAND, event => {\n    onCutForRichText(event, editor);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(PASTE_COMMAND, event => {\n    const [, files, hasTextContent] = eventFiles(event);\n    if (files.length > 0 && !hasTextContent) {\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      return true;\n    }\n\n    // if inputs then paste within the input ignore creating a new node on paste event\n    if (isDOMNode(event.target) && isSelectionCapturedInDecoratorInput(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (selection !== null) {\n      onPasteForRichText(event, editor);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_SPACE_COMMAND, _ => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      $resetCapitalization(selection);\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_TAB_COMMAND, _ => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      $resetCapitalization(selection);\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\n\nexport { $createHeadingNode, $createQuoteNode, $isHeadingNode, $isQuoteNode, DRAG_DROP_PASTE, HeadingNode, QuoteNode, eventFiles, registerRichText };\n"],
  "mappings": "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",
  "names": ["selection"]
}
